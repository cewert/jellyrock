' Session management helper functions
' Global content nodes: m.global.server and m.global.user
' Organized via namespaces for clean code organization

import "pkg:/source/api/baserequest.bs"
import "pkg:/source/api/userauth.bs"
import "pkg:/source/migrations.bs"
import "pkg:/source/utils/misc.bs"
import "pkg:/source/utils/nodeUtils.bs"

' ============================================
' SERVER NAMESPACE
' ============================================

namespace server
  ' Update server URL and populate from API
  function UpdateURL(url as string) as boolean
    if url = "" then return false

    serverNode = m.global.server
    serverNode.serverUrl = url
    success = server.Populate()

    if not success
      ' Reset on failure
      server.Delete()
    end if

    return success
  end function

  ' Fetch and populate server info from Jellyfin API
  function Populate() as boolean
    serverNode = m.global.server

    ' Validate URL
    if not isValidAndNotEmpty(serverNode.serverUrl)
      return false
    end if

    ' Call Jellyfin API
    myServerInfo = ServerInfo()

    ' Validate response
    if not isValid(myServerInfo) or myServerInfo.Error = true
      return false
    end if

    if not isValid(myServerInfo.Id)
      return false
    end if

    ' Update all server fields directly
    serverNode.id = myServerInfo.Id ?? ""
    serverNode.name = myServerInfo.ServerName ?? ""
    serverNode.localURL = myServerInfo.LocalAddress ?? ""
    serverNode.startupWizardCompleted = myServerInfo.StartupWizardCompleted ?? false
    serverNode.version = myServerInfo.Version ?? ""

    ' Check HTTPS
    serverNode.isHTTPS = (serverNode.serverUrl.left(8) = "https://")
    serverNode.isLocalHTTPS = false
    if isValidAndNotEmpty(myServerInfo.LocalAddress)
      serverNode.isLocalHTTPS = (myServerInfo.LocalAddress.left(8) = "https://")
    end if

    ' Set loading state
    serverNode.isLoaded = true
    serverNode.isConnected = true
    serverNode.lastConnected = CreateObject("roDateTime").AsSeconds()

    ' Store raw info for debugging
    #if debug
      serverNode.rawServerInfo = myServerInfo
    #end if

    return true
  end function

  ' Reset server to defaults
  sub Delete()
    ' Get local reference to minimize rendezvous
    localServer = m.global.server

    ' Reset to XML defaults (no fields preserved)
    nodeUtils.resetNodeToDefaults(localServer, "JellyfinServer", [])
  end sub
end namespace

' ============================================
' USER NAMESPACE
' ============================================

namespace user
  ' Process user login from API authentication response
  sub Login(userData as object, saveCredentials = false as boolean)
    if not isValid(userData) then return

    ' Check for valid user ID in either location (direct or nested)
    hasValidId = false
    if isValid(userData.id) and userData.id <> ""
      hasValidId = true
    else if isValid(userData.json) and isValid(userData.json.User) and isValid(userData.json.User.id)
      hasValidId = true
    end if

    if not hasValidId then return

    ' Get local reference to minimize rendezvous
    userNode = m.global.user

    ' Create fresh settings node for this user
    freshSettings = CreateObject("roSGNode", "JellyfinUserSettings")
    userNode.settings = freshSettings

    ' Process user data
    if not isValid(userData.json)
      ' Data from AboutMe() - already in correct format
      myAuthToken = userNode.authToken
      myPrimaryImageTag = userNode.primaryImageTag

      for each key in userData
        userNode[key] = userData[key]
      end for

      userNode.authToken = myAuthToken
      if isValid(myPrimaryImageTag)
        userNode.primaryImageTag = myPrimaryImageTag
      end if
    else
      ' Data from UserData object (get_token response)
      for each key in userData.json.User
        userNode[key] = userData.json.User[key]
      end for

      userNode.authToken = userData.json.AccessToken
      if isValid(userData.json.User.PrimaryImageTag)
        userNode.primaryImageTag = userData.json.User.PrimaryImageTag
      end if
    end if

    ' Create friendly name
    regex = CreateObject("roRegex", "[^a-zA-Z0-9\ \-\_]", "")
    friendlyName = regex.ReplaceAll(userNode.name, "")
    userNode.friendlyName = friendlyName

    ' Migrations
    if isValid(userData.LastRunVersion)
      userNode.LastRunVersion = userData.LastRunVersion
    end if

    ' Process registry settings
    ' Load ALL settings from registry into raw format
    userSettings = RegistryReadAll(userNode.id)
    for each setting in userSettings
      if setting <> "token"
        user.settings.Save(setting, userSettings[setting])
      end if
    end for

    ' Transform display settings from flat format to nested structure
    ' Registry stores: "display.libraryId.key" = "value"
    ' We need: displaySettings[libraryId][key] = value
    displaySettings = user.settings.TransformDisplaySettings(userSettings)

    ' Copy displaySettings to user.settings node
    if isValid(displaySettings)
      userNode.settings.displaySettings = displaySettings
    end if

    ' Enable auto-sync AFTER loading all initial settings
    ' This prevents observers from firing during data load
    userNode.settings.callFunc("enableAutoSync")

    ' Save credentials if requested
    set_user_setting("serverId", m.global.server.id)
    if saveCredentials
      set_user_setting("token", userNode.authToken)
      set_user_setting("username", userNode.name)
      if isValid(userNode.primaryImageTag)
        set_user_setting("primaryimagetag", userNode.primaryImageTag)
      end if
    end if

    if userNode.settings.globalRememberMe
      set_setting("active_user", userNode.id)
    end if

    ' Post-login setup
    user.SetServerDeviceName()
    user.LoadUserPreferences()
  end sub

  ' Logout and reset to defaults
  sub Logout()
    ' Get local reference to minimize rendezvous
    localUser = m.global.user

    ' Reset ALL user fields including settings (no fields preserved)
    nodeUtils.resetNodeToDefaults(localUser, "JellyfinUser", [])

    ' Create fresh settings node with XML defaults
    freshSettings = CreateObject("roSGNode", "JellyfinUserSettings")
    localUser.settings = freshSettings

    ' Load default settings from settings.json
    user.settings.SaveDefaults()

    ' Enable auto-sync AFTER loading defaults
    ' This prevents observers from firing during data load
    freshSettings.callFunc("enableAutoSync")

    if isValid(m.global.sceneManager)
      m.global.sceneManager.currentUser = ""
    end if
  end sub

  ' Set device name from user name
  sub SetServerDeviceName()
    localGlobal = m.global

    ' default device name is the unique id for the device
    deviceName = localGlobal.device.id
    if isValid(localGlobal.user) and isValidAndNotEmpty(localGlobal.user.friendlyName)
      deviceName = deviceName + localGlobal.user.friendlyName
    end if

    ' update global if needed
    if localGlobal.device.serverDeviceName <> deviceName
      tmpDevice = localGlobal.device
      tmpDevice.AddReplace("serverDeviceName", deviceName)
      m.global.setFields({ device: tmpDevice })
    end if
  end sub

  ' Load user preferences from Jellyfin server
  sub LoadUserPreferences()
    id = m.global.user.id

    url = Substitute("DisplayPreferences/usersettings?userId={0}&client=emby", id)
    resp = APIRequest(url)
    jsonResponse = getJson(resp)

    if isValid(jsonResponse) and isValid(jsonResponse.CustomPrefs)
      tmpSetting = jsonResponse.CustomPrefs.useEpisodeImagesInNextUpAndResume
      if isValid(tmpSetting)
        userNode = m.global.user
        ' Set field directly on flattened content node structure
        userNode.useEpisodeImagesInNextUpAndResume = toBoolean(tmpSetting)
      end if

      user.SaveUserHomeSections(jsonResponse.CustomPrefs)

      if isValid(jsonResponse.CustomPrefs["landing-livetv"])
        set_user_setting("display.livetv.landing", jsonResponse.CustomPrefs["landing-livetv"])
      else
        unset_user_setting("display.livetv.landing")
      end if
    else
      user.SaveUserHomeSections({
        homesection0: "librarybuttons",
        homesection1: "resume",
        homesection2: "nextup",
        homesection3: "latestmedia",
        homesection4: "livetv",
        homesection5: "none",
        homesection6: "none"
      })
    end if
  end sub

  ' Save user home sections configuration
  sub SaveUserHomeSections(userPreferences as object)
    rowTypes = []

    if not isValid(userPreferences)
      userPreferences = {
        homesection0: "librarybuttons",
        homesection1: "resume",
        homesection2: "nextup",
        homesection3: "latestmedia",
        homesection4: "livetv",
        homesection5: "none",
        homesection6: "none"
      }
    end if

    for i = 0 to 6
      oldHomeSectionKey = "homesection" + i.toStr()
      newHomeSectionKey = "homeSection" + i.toStr()

      if not userPreferences.DoesExist(oldHomeSectionKey)
        userPreferences.AddReplace(oldHomeSectionKey, "none")
      end if

      rowType = LCase(userPreferences[oldHomeSectionKey])
      if not isValid(rowType) then rowType = "none"

      if inArray(rowTypes, rowType)
        set_user_setting(newHomeSectionKey, "none")
      else
        set_user_setting(newHomeSectionKey, rowType)
        if rowType <> "none"
          rowTypes.push(rowType)
        end if
      end if
    end for
  end sub
end namespace

' ============================================
' USER SETTINGS NAMESPACE
' ============================================

namespace user.settings
  ' Save setting to content node with type conversion
  sub Save(name as string, value as dynamic)
    if not isValid(name) or not isValid(value) then return

    settingsNode = m.global.user.settings

    ' Dynamic field creation with type inference
    if not settingsNode.hasField(name)
      ' Infer type from value
      convertedValue = value
      fieldType = "string"

      ' Handle different input types
      valueType = type(value)

      if valueType = "roString" or valueType = "String"
        ' String input - try to infer actual type
        valueLower = LCase(value)
        if valueLower = "true" or valueLower = "false"
          fieldType = "boolean"
          convertedValue = toBoolean(value)
        else
          intValue = value.toInt()
          floatValue = value.toFloat()

          if intValue.toStr() = value
            fieldType = "integer"
            convertedValue = intValue
          else if floatValue.toStr() = value or value.instr(".") > -1
            fieldType = "float"
            convertedValue = floatValue
          end if
        end if
      else if valueType = "roBoolean" or valueType = "Boolean"
        fieldType = "boolean"
        convertedValue = value
      else if valueType = "roInt" or valueType = "roInteger" or valueType = "Integer"
        fieldType = "integer"
        convertedValue = value
      else if valueType = "roFloat" or valueType = "Float" or valueType = "roDouble" or valueType = "Double"
        fieldType = "float"
        convertedValue = value
      else
        ' Unknown type - convert to string using toStr() method
        convertedValue = value.toStr()
      end if

      ' Add new field dynamically
      settingsNode.addField(name, fieldType, false)
      settingsNode.setField(name, convertedValue)
    else
      ' Update existing field with type conversion
      fieldType = settingsNode.getFieldType(name)
      valueType = type(value)

      if fieldType = "boolean"
        if valueType = "roBoolean" or valueType = "Boolean"
          settingsNode.setField(name, value)
        else if valueType = "roString" or valueType = "String"
          settingsNode.setField(name, toBoolean(value))
        else if valueType = "roInt" or valueType = "roInteger" or valueType = "Integer"
          ' Convert integer to boolean (0 = false, non-zero = true)
          settingsNode.setField(name, value <> 0)
        else
          ' Fallback - convert to string then to boolean
          settingsNode.setField(name, toBoolean(value.toStr()))
        end if
      else if fieldType = "integer"
        if valueType = "roInt" or valueType = "roInteger" or valueType = "Integer"
          settingsNode.setField(name, value)
        else if valueType = "roString" or valueType = "String"
          settingsNode.setField(name, value.toInt())
        else if valueType = "roBoolean" or valueType = "Boolean"
          ' Convert boolean to integer (true = 1, false = 0)
          if value then settingsNode.setField(name, 1) else settingsNode.setField(name, 0)
        else if valueType = "roFloat" or valueType = "Float" or valueType = "roDouble" or valueType = "Double"
          settingsNode.setField(name, Int(value))
        else
          ' Fallback - convert to string then to int
          settingsNode.setField(name, value.toStr().toInt())
        end if
      else if fieldType = "float"
        if valueType = "roFloat" or valueType = "Float" or valueType = "roDouble" or valueType = "Double"
          settingsNode.setField(name, value)
        else if valueType = "roString" or valueType = "String"
          settingsNode.setField(name, value.toFloat())
        else if valueType = "roInt" or valueType = "roInteger" or valueType = "Integer"
          settingsNode.setField(name, Cdbl(value))
        else if valueType = "roBoolean" or valueType = "Boolean"
          ' Convert boolean to float (true = 1.0, false = 0.0)
          if value then settingsNode.setField(name, 1.0) else settingsNode.setField(name, 0.0)
        else
          ' Fallback - convert to string then to float
          settingsNode.setField(name, value.toStr().toFloat())
        end if
      else
        ' String field - convert to string if needed
        if valueType = "roString" or valueType = "String"
          settingsNode.setField(name, value)
        else if valueType = "roBoolean" or valueType = "Boolean"
          if value then settingsNode.setField(name, "true") else settingsNode.setField(name, "false")
        else if valueType = "roInt" or valueType = "roInteger" or valueType = "Integer"
          settingsNode.setField(name, value.toStr())
        else if valueType = "roFloat" or valueType = "Float" or valueType = "roDouble" or valueType = "Double"
          settingsNode.setField(name, value.toStr())
        else
          ' Fallback - try toStr() method
          settingsNode.setField(name, value.toStr())
        end if
      end if
    end if
  end sub

  ' Read setting value
  function Read(name as string) as dynamic
    if name = "" then return invalid
    return m.global.user.settings[name]
  end function

  ' Delete setting field
  sub Delete(name as string)
    if name = "" then return
    settingsNode = m.global.user.settings
    if settingsNode.hasField(name)
      settingsNode.removeField(name)
    end if
  end sub

  ' Load all default settings from settings.json
  sub SaveDefaults()
    configTree = GetConfigTree()
    if not isValid(configTree) then return

    loadDefaultsRecursive(configTree)

    user.settings.LoadGlobals()
    user.SetServerDeviceName()
  end sub

  ' Load global settings from registry
  sub LoadGlobals()
    jfRegistry = RegistryReadAll("JellyRock")
    for each item in jfRegistry
      if Left(item, 7) = "global."
        user.settings.Save(item, get_setting(item))
      end if
    end for
  end sub

  ' Recursively traverse config tree (unlimited depth)
  sub loadDefaultsRecursive(configItems as object)
    if not isValid(configItems) then return

    for each item in configItems
      ' Save this item's default if present
      if isValid(item.default) and isValid(item.settingName)
        user.settings.Save(item.settingName, item.default)
      end if

      ' Recursively process children (handles any nesting depth)
      if isValid(item.children) and item.children.Count() > 0
        loadDefaultsRecursive(item.children)
      end if
    end for
  end sub

  ' Transform display settings from registry flat format to nested structure
  ' Registry stores: "display.libraryId.key" = "value"
  ' Returns: displaySettings[libraryId][key] = value
  function TransformDisplaySettings(registryData as object) as object
    displaySettings = {}

    if not isValid(registryData) then return displaySettings

    for each key in registryData.Keys()
      if key.StartsWith("display.")
        ' Parse "display.libraryId.settingKey" → nested object
        parts = key.Split(".")
        if parts.Count() = 3 and isValidAndNotEmpty(parts[1]) and isValidAndNotEmpty(parts[2])
          libraryId = parts[1]
          settingKey = parts[2]

          ' Create library object if doesn't exist
          if not displaySettings.DoesExist(libraryId)
            displaySettings[libraryId] = {}
          end if

          ' Store setting value with proper type conversion
          rawValue = registryData[key]

          ' Convert boolean fields from string to actual boolean
          if settingKey = "sortAscending"
            displaySettings[libraryId][settingKey] = toBoolean(rawValue)
          else
            ' Other fields stored as-is (strings, etc.)
            displaySettings[libraryId][settingKey] = rawValue
          end if
        end if
      end if
    end for

    return displaySettings
  end function
end namespace
