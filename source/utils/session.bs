' Session management helper functions
' Global content nodes: m.global.server and m.global.user
' Organized via namespaces for clean code organization

import "pkg:/source/api/baserequest.bs"
import "pkg:/source/api/userauth.bs"
import "pkg:/source/data/SessionDataTransformer.bs"
import "pkg:/source/migrations.bs"
import "pkg:/source/utils/misc.bs"
import "pkg:/source/utils/nodeUtils.bs"

' ============================================
' SERVER NAMESPACE
' ============================================

namespace server
  ' Update server URL and populate from API
  function UpdateURL(url as string) as boolean
    if url = "" then return false

    serverNode = m.global.server
    serverNode.serverUrl = url
    success = server.Populate()

    if not success
      ' Reset on failure
      server.Delete()
    end if

    return success
  end function

  ' Fetch and populate server info from Jellyfin API
  function Populate() as boolean
    serverNode = m.global.server

    ' Validate URL
    if not isValidAndNotEmpty(serverNode.serverUrl)
      return false
    end if

    ' Call Jellyfin API
    myServerInfo = ServerInfo()

    ' Validate response
    if not isValid(myServerInfo) or myServerInfo.Error = true
      return false
    end if

    if not isValid(myServerInfo.Id)
      return false
    end if

    ' Update all server fields directly
    serverNode.id = myServerInfo.Id ?? ""
    serverNode.name = myServerInfo.ServerName ?? ""
    serverNode.localURL = myServerInfo.LocalAddress ?? ""
    serverNode.startupWizardCompleted = myServerInfo.StartupWizardCompleted ?? false
    serverNode.version = myServerInfo.Version ?? ""

    ' Check HTTPS
    serverNode.isHTTPS = (serverNode.serverUrl.left(8) = "https://")
    serverNode.isLocalHTTPS = false
    if isValidAndNotEmpty(myServerInfo.LocalAddress)
      serverNode.isLocalHTTPS = (myServerInfo.LocalAddress.left(8) = "https://")
    end if

    ' Set loading state
    serverNode.isLoaded = true
    serverNode.isConnected = true
    serverNode.lastConnected = CreateObject("roDateTime").AsSeconds()

    ' Store raw info for debugging
    #if debug
      serverNode.rawServerInfo = myServerInfo
    #end if

    return true
  end function

  ' Reset server to defaults
  sub Delete()
    ' Get local reference to minimize rendezvous
    localServer = m.global.server

    ' Reset to XML defaults (no fields preserved)
    nodeUtils.resetNodeToDefaults(localServer, "JellyfinServer", [])
  end sub
end namespace

' ============================================
' USER NAMESPACE
' ============================================

namespace user
  ' Process user login from API authentication response
  sub Login(userData as object, saveCredentials = false as boolean)
    if not isValid(userData) then return

    ' Check for valid user ID in either location (direct or nested)
    ' Note: Jellyfin API returns "Id" (capital I) in JSON, but we normalize to lowercase "id" on ContentNode
    hasValidId = false
    if isValid(userData.id) and userData.id <> ""
      hasValidId = true
    else if isValid(userData.Id) and userData.Id <> ""
      hasValidId = true
    else if isValid(userData.json) and isValid(userData.json.User) and isValid(userData.json.User.Id)
      hasValidId = true
    end if

    if not hasValidId then return

    ' Get local reference to minimize rendezvous
    userNode = m.global.user

    ' Create fresh settings node for this user
    freshSettings = CreateObject("roSGNode", "JellyfinUserSettings")
    userNode.settings = freshSettings

    ' Process user data
    if not isValid(userData.json)
      ' Data from AboutMe() - already in correct format
      myAuthToken = userNode.authToken
      myPrimaryImageTag = userData.PrimaryImageTag

      ' Copy all fields EXCEPT Configuration and Policy (these are transformed separately)
      for each key in userData
        if key <> "Configuration" and key <> "Policy"
          ' Normalize Id to lowercase id for ContentNode field
          if LCase(key) = "id"
            userNode.id = userData[key]
          else
            userNode[key] = userData[key]
          end if
        end if
      end for

      ' Transform Configuration and Policy to nested content nodes
      transformer = new SessionDataTransformer()
      if isValid(userData.Configuration)
        userNode.config = transformer.transformUserConfiguration(userData.Configuration)
      end if
      if isValid(userData.Policy)
        userNode.policy = transformer.transformUserPolicy(userData.Policy)
      end if

      if saveCredentials
        if isValidAndNotEmpty(myPrimaryImageTag)
          registry_write("primaryImageTag", myPrimaryImageTag, m.global.user.id)
        end if
        if isValidAndNotEmpty(myAuthToken)
          registry_write("authToken", myAuthToken, m.global.user.id)
        end if
      end if
    else
      ' Data from UserData object (get_token response)
      myPrimaryImageTag = userData.json.User.PrimaryImageTag
      myAuthToken = userData.json.AccessToken

      ' Copy all fields EXCEPT Configuration and Policy (these are transformed separately)
      for each key in userData.json.User
        if key <> "Configuration" and key <> "Policy"
          ' Normalize Id to lowercase id for ContentNode field
          if LCase(key) = "id"
            userNode.id = userData.json.User[key]
          else
            userNode[key] = userData.json.User[key]
          end if
        end if
      end for

      ' Transform Configuration and Policy to nested content nodes
      transformer = new SessionDataTransformer()
      if isValid(userData.json.User.Configuration)
        userNode.config = transformer.transformUserConfiguration(userData.json.User.Configuration)
      end if
      if isValid(userData.json.User.Policy)
        userNode.policy = transformer.transformUserPolicy(userData.json.User.Policy)
      end if

      if saveCredentials
        if isValidAndNotEmpty(myPrimaryImageTag)
          registry_write("primaryImageTag", myPrimaryImageTag, m.global.user.id)
        end if

        if isValidAndNotEmpty(myAuthToken)
          registry_write("authToken", myAuthToken, m.global.user.id)
        end if
      end if
    end if

    if isValidAndNotEmpty(myPrimaryImageTag)
      userNode.primaryImageTag = myPrimaryImageTag
    end if
    if isValidAndNotEmpty(myAuthToken)
      userNode.authToken = myAuthToken
    end if

    ' Create friendly name
    regex = CreateObject("roRegex", "[^a-zA-Z0-9\ \-\_]", "")
    friendlyName = regex.ReplaceAll(userNode.name, "")
    userNode.friendlyName = friendlyName

    ' Migrations
    if isValid(userData.LastRunVersion)
      userNode.LastRunVersion = userData.LastRunVersion
    end if

    ' Process registry settings
    ' Load ALL user-specific settings from user's registry section
    userSettings = RegistryReadAll(userNode.id)

    ' Get field types once to check for field existence (more reliable than hasField)
    userNodeFieldTypes = userNode.getFieldTypes()
    settingsNodeFieldTypes = userNode.settings.getFieldTypes()

    ' Use node structure as source of truth to determine where each setting belongs
    for each setting in userSettings
      print "Loading user setting:", setting, "=", userSettings[setting]
      ' Skip global settings (loaded from global section separately)
      ' Skip display settings (handled separately below via TransformDisplaySettings)
      if not isGlobalSetting(setting) and not setting.StartsWith("display.")
        ' Check where this setting belongs based on field existence
        if userNodeFieldTypes.DoesExist(setting)
          ' Skip node-type fields - these are server-authoritative and never loaded from registry
          ' This prevents registry tampering of nested content nodes (policy, config, settings)
          if userNode.getFieldType(setting) = "node"
            print "Skipping node-type field from registry:", setting
            continue for
          end if

          print "Setting found on user node:", setting
          ' Field exists on user node - set it there
          userNode.setField(setting, userSettings[setting])
        else if settingsNodeFieldTypes.DoesExist(setting)
          print "Setting found on user settings node:", setting
          ' Field exists on settings node - use settings system with type conversion
          user.settings.Save(setting, userSettings[setting])
        else
          print "user.Login: Unknown setting:", setting
          ' Unknown field - registry-only key (like "serverId"), skip loading to node
          ' It will remain in registry for getSavedUsers() etc.
        end if
      end if
    end for

    ' Load global settings from global registry section (JellyRock or test-global)
    ' These settings apply to all users on this device
    user.settings.LoadGlobals()

    ' Transform display settings from flat format to nested structure
    ' Registry stores: "display.libraryId.key" = "value"
    ' We need: displaySettings[libraryId][key] = value
    displaySettings = user.settings.TransformDisplaySettings(userSettings)

    ' Copy displaySettings to user.settings node
    if isValid(displaySettings)
      userNode.settings.displaySettings = displaySettings
    end if

    ' Enable auto-sync AFTER loading all initial settings
    ' This prevents observers from firing during data load
    userNode.settings.callFunc("enableAutoSync")

    ' Save credentials if requested
    set_user_setting("serverId", m.global.server.id)
    if saveCredentials
      set_user_setting("authToken", userNode.authToken)
      set_user_setting("username", userNode.name)
      if isValid(userNode.primaryImageTag)
        set_user_setting("primaryImageTag", userNode.primaryImageTag)
      end if
    end if

    if userNode.settings.globalRememberMe
      set_setting("active_user", userNode.id)
    end if

    ' Post-login setup
    user.SetServerDeviceName()
    user.LoadUserPreferences()
  end sub

  ' Logout and reset to defaults
  sub Logout()
    ' Get local reference to minimize rendezvous
    localUser = m.global.user

    ' Reset ALL user fields including settings (no fields preserved)
    nodeUtils.resetNodeToDefaults(localUser, "JellyfinUser", [])

    ' Create fresh nested nodes with XML defaults
    freshSettings = CreateObject("roSGNode", "JellyfinUserSettings")
    freshConfig = CreateObject("roSGNode", "JellyfinUserConfiguration")
    freshPolicy = CreateObject("roSGNode", "JellyfinUserPolicy")

    localUser.settings = freshSettings
    localUser.config = freshConfig
    localUser.policy = freshPolicy

    if isValid(m.global.sceneManager)
      m.global.sceneManager.currentUser = ""
    end if
  end sub

  ' Set device name from user name
  sub SetServerDeviceName()
    localGlobal = m.global

    ' default device name is the unique id for the device
    deviceName = localGlobal.device.id
    if isValid(localGlobal.user) and isValidAndNotEmpty(localGlobal.user.friendlyName)
      deviceName = deviceName + localGlobal.user.friendlyName
    end if

    ' update global if needed
    if localGlobal.device.serverDeviceName <> deviceName
      tmpDevice = localGlobal.device
      tmpDevice.AddReplace("serverDeviceName", deviceName)
      m.global.setFields({ device: tmpDevice })
    end if
  end sub

  ' Load user preferences from Jellyfin server
  sub LoadUserPreferences()
    id = m.global.user.id

    url = Substitute("DisplayPreferences/usersettings?userId={0}&client=emby", id)
    resp = APIRequest(url)
    jsonResponse = getJson(resp)

    if isValid(jsonResponse) and isValid(jsonResponse.CustomPrefs)
      tmpSetting = jsonResponse.CustomPrefs.useEpisodeImagesInNextUpAndResume
      if isValid(tmpSetting)
        userNode = m.global.user
        ' Set field on nested config node
        userNode.config.useEpisodeImagesInNextUpAndResume = toBoolean(tmpSetting)
      end if

      ' Check if CustomPrefs has any homesection data
      if user.hasHomeSectionData(jsonResponse.CustomPrefs)
        print "LoadUserPreferences: Using server CustomPrefs for home sections"
        user.SaveUserHomeSections(jsonResponse.CustomPrefs)
      else
        ' CustomPrefs is empty or has no homesection keys - use defaults
        print "LoadUserPreferences: CustomPrefs has no homesection data, using defaults"
        user.SaveUserHomeSections(user.getDefaultHomeSections())
      end if

      if isValid(jsonResponse.CustomPrefs["landing-livetv"])
        set_user_setting("displayLiveTvLanding", jsonResponse.CustomPrefs["landing-livetv"])
      else
        unset_user_setting("displayLiveTvLanding")
      end if
    else
      print "LoadUserPreferences: No valid CustomPrefs from server, using defaults"
      user.SaveUserHomeSections(user.getDefaultHomeSections())
    end if
  end sub

  ' Get default home sections configuration
  function getDefaultHomeSections() as object
    return {
      homesection0: "smalllibrarytiles",
      homesection1: "resume",
      homesection2: "nextup",
      homesection3: "resumeaudio",
      homesection4: "activerecordings",
      homesection5: "livetv",
      homesection6: "latestmedia"
    }
  end function

  ' Check if CustomPrefs contains any homesection data
  function hasHomeSectionData(prefs as object) as boolean
    if not isValid(prefs) then return false

    for i = 0 to 6
      key = "homesection" + i.toStr()
      if prefs.DoesExist(key)
        return true
      end if
    end for

    return false
  end function

  ' Save user home sections configuration
  sub SaveUserHomeSections(userPreferences as object)
    rowTypes = []

    if not isValid(userPreferences)
      userPreferences = user.getDefaultHomeSections()
    end if

    for i = 0 to 6
      oldHomeSectionKey = "homesection" + i.toStr()
      newHomeSectionKey = "homeSection" + i.toStr()

      if not userPreferences.DoesExist(oldHomeSectionKey)
        userPreferences.AddReplace(oldHomeSectionKey, "none")
      end if

      rowType = LCase(userPreferences[oldHomeSectionKey])
      if not isValid(rowType) then rowType = "none"

      if inArray(rowTypes, rowType)
        set_user_setting(newHomeSectionKey, "none")
      else
        set_user_setting(newHomeSectionKey, rowType)
        if rowType <> "none"
          rowTypes.push(rowType)
        end if
      end if
    end for
  end sub
end namespace

' ============================================
' USER SETTINGS NAMESPACE
' ============================================

namespace user.settings
  ' Save setting to content node with type conversion
  sub Save(name as string, value as dynamic)
    if not isValid(name) or not isValid(value) then return

    settingsNode = m.global.user.settings

    ' All fields should be defined in JellyfinUserSettings.xml
    ' If field doesn't exist, it's a programming error
    if not settingsNode.hasField(name)
      print `ERROR: Attempted to save unknown setting: ${name}`
      return
    end if

    ' Update field with type conversion based on XML-defined field type
    fieldType = settingsNode.getFieldType(name)
    valueType = type(value)

    if fieldType = "boolean"
      if valueType = "roBoolean" or valueType = "Boolean"
        settingsNode.setField(name, value)
      else if valueType = "roString" or valueType = "String"
        settingsNode.setField(name, toBoolean(value))
      else if valueType = "roInt" or valueType = "roInteger" or valueType = "Integer"
        ' Convert integer to boolean (0 = false, non-zero = true)
        settingsNode.setField(name, value <> 0)
      else
        ' Fallback - convert to string then to boolean
        settingsNode.setField(name, toBoolean(value.toStr()))
      end if
    else if fieldType = "integer"
      if valueType = "roInt" or valueType = "roInteger" or valueType = "Integer"
        settingsNode.setField(name, value)
      else if valueType = "roString" or valueType = "String"
        settingsNode.setField(name, value.toInt())
      else if valueType = "roBoolean" or valueType = "Boolean"
        ' Convert boolean to integer (true = 1, false = 0)
        if value then settingsNode.setField(name, 1) else settingsNode.setField(name, 0)
      else if valueType = "roFloat" or valueType = "Float" or valueType = "roDouble" or valueType = "Double"
        settingsNode.setField(name, Int(value))
      else
        ' Fallback - convert to string then to int
        settingsNode.setField(name, value.toStr().toInt())
      end if
    else if fieldType = "float"
      if valueType = "roFloat" or valueType = "Float" or valueType = "roDouble" or valueType = "Double"
        settingsNode.setField(name, value)
      else if valueType = "roString" or valueType = "String"
        settingsNode.setField(name, value.toFloat())
      else if valueType = "roInt" or valueType = "roInteger" or valueType = "Integer"
        settingsNode.setField(name, Cdbl(value))
      else if valueType = "roBoolean" or valueType = "Boolean"
        ' Convert boolean to float (true = 1.0, false = 0.0)
        if value then settingsNode.setField(name, 1.0) else settingsNode.setField(name, 0.0)
      else
        ' Fallback - convert to string then to float
        settingsNode.setField(name, value.toStr().toFloat())
      end if
    else if fieldType = "assocarray"
      ' AssociativeArray field (e.g., displaySettings, rawSettings)
      settingsNode.setField(name, value)
    else
      ' String or other field type - convert to string if needed
      if valueType = "roString" or valueType = "String"
        settingsNode.setField(name, value)
      else if valueType = "roBoolean" or valueType = "Boolean"
        if value then settingsNode.setField(name, "true") else settingsNode.setField(name, "false")
      else if valueType = "roInt" or valueType = "roInteger" or valueType = "Integer"
        settingsNode.setField(name, value.toStr())
      else if valueType = "roFloat" or valueType = "Float" or valueType = "roDouble" or valueType = "Double"
        settingsNode.setField(name, value.toStr())
      else
        ' Fallback - try toStr() method
        settingsNode.setField(name, value.toStr())
      end if
    end if
  end sub

  ' Read setting value
  function Read(name as string) as dynamic
    if name = "" then return invalid
    return m.global.user.settings[name]
  end function

  ' Reset setting to its XML default value
  ' NOTE: This does NOT delete from registry - observer always saves changes
  ' Use this for "reset to default" functionality
  ' For sensitive fields (token, username), use unset_user_setting() instead
  sub Delete(name as string)
    if name = "" then return

    settingsNode = m.global.user.settings
    if not settingsNode.hasField(name) then return

    ' Get the field type to determine XML default value
    fieldType = settingsNode.getFieldType(name)

    ' Reset XML-defined field to its default value
    ' This will trigger observer which saves the default to registry
    if fieldType = "string"
      settingsNode.setField(name, "")
    else if fieldType = "boolean"
      settingsNode.setField(name, false)
    else if fieldType = "integer"
      settingsNode.setField(name, 0)
    else if fieldType = "float"
      settingsNode.setField(name, 0.0)
    else if fieldType = "assocarray"
      settingsNode.setField(name, {})
    else if fieldType = "array"
      settingsNode.setField(name, [])
    end if
  end sub

  ' Load all default settings from settings.json
  sub SaveDefaults()
    configTree = GetConfigTree()
    if not isValid(configTree) then return

    loadDefaultsRecursive(configTree)

    user.settings.LoadGlobals()
    user.SetServerDeviceName()
  end sub

  ' Load global settings from registry
  sub LoadGlobals()
    ' Load global settings from the global registry section
    ' Returns "JellyRock" in production, "test-global" during tests
    ' These settings apply to all users on this device
    globalSection = getGlobalRegistrySection()
    globalRegistry = RegistryReadAll(globalSection)
    for each key in globalRegistry
      ' Only load keys that start with "global" (actual global settings)
      if isGlobalSetting(key)
        value = get_setting(key)
        if isValid(value)
          user.settings.Save(key, value)
        end if
      end if
    end for
  end sub

  ' Recursively traverse config tree (unlimited depth)
  sub loadDefaultsRecursive(configItems as object)
    if not isValid(configItems) then return

    for each item in configItems
      ' Save this item's default if present
      if isValid(item.default) and isValid(item.settingName)
        user.settings.Save(item.settingName, item.default)
      end if

      ' Recursively process children (handles any nesting depth)
      if isValid(item.children) and item.children.Count() > 0
        loadDefaultsRecursive(item.children)
      end if
    end for
  end sub

  ' Transform display settings from registry flat format to nested structure
  ' Registry stores: "display.libraryId.key" = "value"
  ' Returns: displaySettings[libraryId][key] = value
  function TransformDisplaySettings(registryData as object) as object
    displaySettings = {}

    if not isValid(registryData) then return displaySettings

    for each key in registryData.Keys()
      if key.StartsWith("display.")
        ' Parse "display.libraryId.settingKey" → nested object
        parts = key.Split(".")
        if parts.Count() = 3 and isValidAndNotEmpty(parts[1]) and isValidAndNotEmpty(parts[2])
          libraryId = parts[1]
          settingKey = parts[2]

          ' Create library object if doesn't exist
          if not displaySettings.DoesExist(libraryId)
            displaySettings[libraryId] = {}
          end if

          ' Store setting value with proper type conversion
          rawValue = registryData[key]

          ' Convert boolean fields from string to actual boolean
          if settingKey = "sortAscending"
            displaySettings[libraryId][settingKey] = toBoolean(rawValue)
          else
            ' Other fields stored as-is (strings, etc.)
            displaySettings[libraryId][settingKey] = rawValue
          end if
        end if
      end if
    end for

    return displaySettings
  end function
end namespace
