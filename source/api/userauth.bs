' needed for SignOut() and ServerInfo()
import "pkg:/source/utils/misc.bs"
import "pkg:/source/utils/session.bs"

function get_token(username as string, password as string)
  url = "Users/AuthenticateByName?format=json"
  req = APIRequest(url)

  json = postJson(req, FormatJson({ "Username": username, "Pw": password }))

  if not isValid(json) then return invalid

  userdata = CreateObject("roSGNode", "UserData")
  userdata.json = json
  userdata.callFunc("saveToRegistry")

  return userdata
end function

function AboutMe(id = "" as string)
  if id = ""
    if isValid(m.global.user.id)
      id = m.global.user.id
    else
      return invalid
    end if
  end if

  url = Substitute("Users/{0}", id)
  resp = APIRequest(url)
  return getJson(resp)
end function

sub SignOut(deleteSavedEntry = true as boolean)
  if deleteSavedEntry
    unset_user_setting("token")
    unset_user_setting("username")
  end if
  unset_setting("active_user")
  user.Logout()
  m.global.sceneManager.currentUser = ""
  group = m.global.sceneManager.callFunc("getActiveScene")
  group.optionsAvailable = false
end sub

function AvailableUsers()
  users = parseJson(get_setting("available_users", "[]"))
  return users
end function

function ServerInfo()
  url = "System/Info/Public"
  req = APIRequest(url)

  ' Handle case where server URL is not set or invalid
  if not isValid(req)
    return { "Error": true, "ErrorMessage": "Server URL not configured" }
  end if

  req.setMessagePort(CreateObject("roMessagePort"))
  req.AsyncGetToString()

  ' wait 15 seconds for a server response
  resp = wait(35000, req.GetMessagePort())

  ' handle unknown errors
  if type(resp) <> "roUrlEvent"
    return { "Error": true, "ErrorMessage": "Unknown" }
  end if

  ' check for a location redirect header in the response
  headers = resp.GetResponseHeaders()
  if isValid(headers) and isValid(headers.location)

    ' only follow redirect if it the API Endpoint path is the same (/System/Info/Public)
    ' set the server to new location and try again
    if right(headers.location, 19) = "/System/Info/Public"
      set_setting("server", left(headers.location, len(headers.location) - 19))
      isConnected = server.UpdateURL(left(headers.location, len(headers.location) - 19))
      if isConnected
        info = ServerInfo()
        if info.Error
          info.UpdatedUrl = left(headers.location, len(headers.location) - 19)
          info.ErrorMessage = info.ErrorMessage + " (Note: Server redirected us to " + info.UpdatedUrl + ")"
        end if
        return info
      end if
    end if
  end if

  ' handle any non 200 responses, returning the error code and message
  if resp.GetResponseCode() <> 200
    return { "Error": true, "ErrorCode": resp.GetResponseCode(), "ErrorMessage": resp.GetFailureReason() }
  end if

  ' return the parsed response string
  responseString = resp.GetString()
  if isValid(responseString) and responseString <> ""
    result = ParseJson(responseString)
    if isValid(result)
      result.Error = false
      return result
    end if
  end if

  ' otherwise return error message
  return { "Error": true, "ErrorMessage": "Does not appear to be a Jellyfin Server" }

end function

function GetPublicUsers()
  url = "Users/Public"
  resp = APIRequest(url)
  return getJson(resp)
end function

sub LoadUserAbilities()
  ' Use flattened structure
  userNode = m.global.user

  ' Check for EnableLiveTvManagement
  canRecord = userNode.enableLiveTvManagement ?? false

  if canRecord
    set_user_setting("livetv.canrecord", "true")
  else
    set_user_setting("livetv.canrecord", "false")
  end if

  ' Check for EnableContentDeletion
  canDelete = userNode.enableContentDeletion ?? false

  if canDelete
    set_user_setting("content.candelete", "true")
  else
    set_user_setting("content.candelete", "false")
  end if
end sub

function initQuickConnect()
  resp = APIRequest("QuickConnect/Initiate")
  jsonResponse = getJson(resp)
  if not isValid(jsonResponse)
    return invalid
  end if

  if not isValid(jsonResponse.Secret)
    return invalid
  end if

  return jsonResponse
end function

function checkQuickConnect(secret)
  url = Substitute("QuickConnect/Connect?secret={0}", secret)
  resp = APIRequest(url)
  jsonResponse = getJson(resp)
  if not isValid(jsonResponse)
    return false
  end if

  if isValid(jsonResponse.Authenticated) and jsonResponse.Authenticated = true
    return true
  end if

  return false
end function

function AuthenticateViaQuickConnect(secret)
  params = {
    secret: secret
  }
  req = APIRequest("Users/AuthenticateWithQuickConnect")
  jsonResponse = postJson(req, FormatJson(params))
  if isValid(jsonResponse) and isValid(jsonResponse.AccessToken) and isValid(jsonResponse.User)
    userdata = CreateObject("roSGNode", "UserData")
    userdata.json = jsonResponse
    m.global.user.id = jsonResponse.User.Id
    m.global.user.authToken = jsonResponse.AccessToken
    userdata.callFunc("saveToRegistry")

    return true
  end if

  return false
end function
