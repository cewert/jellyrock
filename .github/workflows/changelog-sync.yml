name: Changelog Sync

on:
  push:
    branches:
      - main

jobs:
  sync-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.JELLYROCK_BOT_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Determine sync type
        id: sync_type
        run: |
          # Check if this push contains a new tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          PREVIOUS_HEAD=$(git rev-parse HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$LATEST_TAG" ] && [ -n "$PREVIOUS_HEAD" ]; then
            # Check if the tag was created in this push (tag points to HEAD but not to previous HEAD)
            TAG_COMMIT=$(git rev-list -n 1 "$LATEST_TAG" 2>/dev/null || echo "")
            CURRENT_COMMIT=$(git rev-parse HEAD)
            
            if [ "$TAG_COMMIT" = "$CURRENT_COMMIT" ]; then
              # Check if this tag didn't exist in the previous commit
              if ! git merge-base --is-ancestor "$LATEST_TAG" "$PREVIOUS_HEAD" 2>/dev/null; then
                # New tag was created, extract version number
                VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
                echo "type=release" >> $GITHUB_OUTPUT
                echo "version=$VERSION" >> $GITHUB_OUTPUT
                echo "üöÄ New tag detected: $LATEST_TAG, processing as release $VERSION"
                exit 0
              fi
            fi
          fi
          
          # Default to unreleased
          echo "type=unreleased" >> $GITHUB_OUTPUT
          echo "üìù Push to main: processing as unreleased"

      - name: Sync release changes
        if: steps.sync_type.outputs.type == 'release'
        env:
          GH_TOKEN: ${{ secrets.JELLYROCK_BOT_TOKEN }}
        run: |
          echo "üöÄ Converting unreleased changes to release ${{ steps.sync_type.outputs.version }}..."
          npm run changelog:sync-release ${{ steps.sync_type.outputs.version }}

      - name: Sync unreleased changes
        if: steps.sync_type.outputs.type == 'unreleased'
        env:
          GH_TOKEN: ${{ secrets.JELLYROCK_BOT_TOKEN }}
        run: |
          echo "üîÑ Syncing unreleased changes to changelog..."
          npm run changelog:sync-unreleased

      - name: Validate changelog
        run: |
          echo "üîç Validating changelog consistency..."
          npm run changelog:validate

      - name: Commit changes if needed
        run: |
          if git diff --quiet HEAD -- CHANGELOG.md; then
            echo "‚ÑπÔ∏è No changelog changes needed"
          else
            git config user.name "JellyRock-bot"
            git config user.email "c.ewert@gmail.com"
            git add CHANGELOG.md
            
            if [ "${{ steps.sync_type.outputs.type }}" = "release" ]; then
              echo "üìù Committing release changelog sync for v${{ steps.sync_type.outputs.version }}"
              git commit -m "chore:(docs) convert unreleased section to v${{ steps.sync_type.outputs.version }} release"
            else
              echo "üìù Committing unreleased changelog sync"
              git commit -m "chore:(docs) sync unreleased changelog entries"
            fi
            
            # Retry push with pull if needed (handles concurrent commits)
            max_retries=3
            retry_count=0
            
            while [ $retry_count -lt $max_retries ]; do
              if git push; then
                echo "‚úÖ Changelog synced successfully"
                break
              else
                retry_count=$((retry_count + 1))
                echo "‚ö†Ô∏è Push failed (attempt $retry_count/$max_retries). Retrying with latest changes..."
                
                if [ $retry_count -lt $max_retries ]; then
                  # Pull latest changes and re-run changelog sync to handle any new commits
                  git pull --rebase origin main
                  
                  # Re-run changelog sync to process any new commits that were added
                  if [ "${{ steps.sync_type.outputs.type }}" = "release" ]; then
                    npm run changelog:sync-release ${{ steps.sync_type.outputs.version }}
                  else
                    npm run changelog:sync-unreleased
                  fi
                  
                  # Add any new changes and amend commit if needed
                  if ! git diff --quiet HEAD -- CHANGELOG.md; then
                    git add CHANGELOG.md
                    git commit --amend --no-edit
                  fi
                  
                  sleep $((retry_count * 2))  # Exponential backoff
                else
                  echo "‚ùå Failed to push after $max_retries attempts"
                  exit 1
                fi
              fi
            done
          fi

      - name: Verify final state
        run: |
          echo "‚úÖ Changelog sync completed"
          echo "üìä Final changelog state:"
          npm run changelog:status
