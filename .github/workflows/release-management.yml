name: Release Preparation

on:
  push:
    branches:
      - "release-*.*.*" # e.g. release-1.0.0, release-2.1.3

jobs:
  validate-and-prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      branch_name: ${{ steps.extract_version.outputs.branch_name }}
      major: ${{ steps.extract_version_components.outputs.major }}
      minor: ${{ steps.extract_version_components.outputs.minor }}
      build_version: ${{ steps.extract_version_components.outputs.build_version }}
      pr_exists: ${{ steps.check_pr.outputs.pr_exists }}
      pr_number: ${{ steps.check_pr.outputs.pr_number }}
    steps:
      - name: Debug Info
        run: |
          echo "🔍 Workflow Debug Information:"
          echo "Branch: ${GITHUB_REF#refs/heads/}"
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: ${{ github.ref }}
          token: ${{ secrets.JELLYROCK_BOT_TOKEN }}
          fetch-tags: true
          fetch-depth: 0

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          VERSION=${BRANCH_NAME#release-}  # Remove 'release-' prefix
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Branch: $BRANCH_NAME"
          echo "Version: $VERSION"

      - name: Extract version components
        id: extract_version_components
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          IFS='.' read -r MAJOR MINOR BUILD_VERSION <<< "$VERSION"
          echo "🔍 Debug: Extracted version components:"
          echo "  MAJOR: $MAJOR"
          echo "  MINOR: $MINOR"
          echo "  BUILD_VERSION: $BUILD_VERSION"
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "build_version=$BUILD_VERSION" >> $GITHUB_OUTPUT

      - name: Validate version components
        run: |
          MAJOR="${{ steps.extract_version_components.outputs.major }}"
          MINOR="${{ steps.extract_version_components.outputs.minor }}"
          BUILD_VERSION="${{ steps.extract_version_components.outputs.build_version }}"

          if [[ ! "$MAJOR" =~ ^[0-9]+$ ]] || [[ ! "$MINOR" =~ ^[0-9]+$ ]] || [[ ! "$BUILD_VERSION" =~ ^[0-9]+$ ]]; then
            echo "::error::Invalid version components. MAJOR: $MAJOR, MINOR: $MINOR, BUILD_VERSION: $BUILD_VERSION"
            echo "Expected format: x.y.z where x, y, z are integers"
            exit 1
          fi
          echo "✅ Valid version components: $MAJOR.$MINOR.$BUILD_VERSION"

      - name: Validate version format
        id: validate_version
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "✅ Valid semantic version: $VERSION"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: x.y.z (e.g., 1.0.0)"
          fi

      - name: Notify on invalid version
        if: steps.validate_version.outputs.valid == 'false'
        run: |
          echo "::error::Invalid version branch format. Expected pattern: release-1.0.0"
          exit 1

      - name: Validate new version is greater than previous
        id: validate_new_version
        run: |
          PREVIOUS_VERSION=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 | sed 's/^v//')
          CURRENT_VERSION="${{ steps.extract_version.outputs.version }}"
          if [[ -z "$PREVIOUS_VERSION" ]]; then
            echo "No previous version found. This is the first version."
            echo "is_greater=true" >> $GITHUB_OUTPUT
          else
            # Split versions into components for proper comparison
            IFS='.' read -r PREV_MAJOR PREV_MINOR PREV_BUILD <<< "$PREVIOUS_VERSION"
            IFS='.' read -r CURR_MAJOR CURR_MINOR CURR_BUILD <<< "$CURRENT_VERSION"
            
            # Compare versions numerically
            IS_GREATER=false
            if [[ $CURR_MAJOR -gt $PREV_MAJOR ]]; then
              IS_GREATER=true
            elif [[ $CURR_MAJOR -eq $PREV_MAJOR ]] && [[ $CURR_MINOR -gt $PREV_MINOR ]]; then
              IS_GREATER=true
            elif [[ $CURR_MAJOR -eq $PREV_MAJOR ]] && [[ $CURR_MINOR -eq $PREV_MINOR ]] && [[ $CURR_BUILD -gt $PREV_BUILD ]]; then
              IS_GREATER=true
            fi
            
            if [[ $IS_GREATER == true ]]; then
              echo "is_greater=true" >> $GITHUB_OUTPUT
              echo "New version $CURRENT_VERSION is greater than previous version $PREVIOUS_VERSION"
            else
              echo "is_greater=false" >> $GITHUB_OUTPUT
              echo "::error::New version $CURRENT_VERSION is not greater than previous version $PREVIOUS_VERSION"
            fi
          fi

      - name: Notify on invalid new version
        if: steps.validate_new_version.outputs.is_greater == 'false'
        run: |
          echo "::error::New version must be greater than the previous version."
          exit 1

      - name: Check if PR already exists
        id: check_pr
        env:
          GH_TOKEN: ${{ secrets.JELLYROCK_BOT_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.extract_version.outputs.branch_name }}"
          PR_INFO=$(gh pr list --head "$BRANCH_NAME" --base main --json number,state | jq -r '.[0]')

          if [[ "$PR_INFO" != "null" ]]; then
            PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
            PR_STATE=$(echo "$PR_INFO" | jq -r '.state')
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "✅ Found existing PR #$PR_NUMBER with state: $PR_STATE"
          else
            echo "pr_exists=false" >> $GITHUB_OUTPUT
            echo "pr_number=" >> $GITHUB_OUTPUT
            echo "ℹ️ No existing PR found for branch: $BRANCH_NAME"
          fi

  update-version-files:
    needs: validate-and-prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: ${{ github.ref }}
          token: ${{ secrets.JELLYROCK_BOT_TOKEN }}

      - name: Install required packages
        uses: awalsh128/cache-apt-pkgs-action@acb598e5ddbc6f68a970c5da0688d2f3a9f04d05 # v1.6.0
        with:
          packages: jq

      - name: Update version in package.json
        run: |
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          echo "Updating package.json with version: $VERSION"
          jq --arg ver "$VERSION" '.version = $ver' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated package.json successfully"

      - name: Update version in manifest
        run: |
          MAJOR="${{ needs.validate-and-prepare.outputs.major }}"
          MINOR="${{ needs.validate-and-prepare.outputs.minor }}"
          BUILD_VERSION="${{ needs.validate-and-prepare.outputs.build_version }}"
          echo "Updating manifest with version components:"
          echo "  MAJOR: $MAJOR"
          echo "  MINOR: $MINOR"
          echo "  BUILD_VERSION: $BUILD_VERSION"
          echo "📄 Current manifest before update:"
          grep -E "^(major_version|minor_version|build_version)=" manifest || echo "No version fields found in manifest"
          sed -i "s/^major_version=.*/major_version=$MAJOR/" manifest
          sed -i "s/^minor_version=.*/minor_version=$MINOR/" manifest
          sed -i "s/^build_version=.*/build_version=$BUILD_VERSION/" manifest
          echo "📄 Updated manifest after changes:"
          grep -E "^(major_version|minor_version|build_version)=" manifest
          echo "Updated manifest successfully"

      - name: update 'package-lock.json'
        run: npm install --no-optional

      - name: Commit version updates
        run: |
          git config user.name "JellyRock-bot"
          git config user.email "c.ewert@gmail.com"
          git add package.json package-lock.json manifest

          if git diff --cached --quiet; then
            echo "ℹ️ No changes to commit"
            echo "has_changes=false" >> $GITHUB_ENV
          else
            git commit -m "chore: bump version to ${{ needs.validate-and-prepare.outputs.version }} [skip ci]"
            echo "has_changes=true" >> $GITHUB_ENV
          fi

      - name: Push version updates to branch
        if: env.has_changes == 'true'
        uses: CasperWA/push-protected@74d25b8aa10e0c29024138735d32f3c0b75f9279 # v2
        with:
          token: ${{ secrets.JELLYROCK_BOT_TOKEN }}
          branch: ${{ needs.validate-and-prepare.outputs.branch_name }}
          unprotect_reviews: false

  create-release-pr:
    needs: [validate-and-prepare, update-version-files]
    runs-on: ubuntu-latest
    if: needs.validate-and-prepare.outputs.pr_exists == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: ${{ needs.validate-and-prepare.outputs.branch_name }}
          token: ${{ secrets.JELLYROCK_BOT_TOKEN }}

      - name: Create Pull Request
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.JELLYROCK_BOT_TOKEN }}
        run: |
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          BRANCH_NAME="${{ needs.validate-and-prepare.outputs.branch_name }}"

          # Create PR body with version info and changelog
          PR_BODY="## 🚀 Prepare for v$VERSION release"

          PR_URL=$(gh pr create \
            --title "Prepare for v$VERSION release" \
            --body "$PR_BODY" \
            --base main \
            --head "$BRANCH_NAME" \
            --label "release-prep")

          echo "✅ Created release preparation PR for v$VERSION"
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT

  create-draft-release:
    needs: [validate-and-prepare, update-version-files, create-release-pr]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout release branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: ${{ needs.validate-and-prepare.outputs.branch_name }}
          token: ${{ secrets.JELLYROCK_BOT_TOKEN }}
          fetch-tags: true
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version: "lts/*"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build production app
        run: npm run build:prod

      - name: Create release ZIP
        id: create_zip
        run: |
          echo "📦 Preparing ZIP file for release..."
          ZIP_NAME="JellyRock-v${{ needs.validate-and-prepare.outputs.version }}.zip"
          if [[ -f "${{ github.workspace }}/out/jellyrock.zip" ]]; then
            cp "${{ github.workspace }}/out/jellyrock.zip" "${{ github.workspace }}/out/$ZIP_NAME"
            echo "✅ ZIP renamed to: $ZIP_NAME"
          else
            echo "❌ Expected ZIP file not found at ./out/jellyrock.zip"
            ls -la ${{ github.workspace }}/out/ || echo "out directory not found"
            exit 1
          fi
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT

      - name: Check for existing draft release
        id: check_draft
        env:
          GH_TOKEN: ${{ secrets.JELLYROCK_BOT_TOKEN }}
        run: |
          TAG_NAME="v${{ needs.validate-and-prepare.outputs.version }}"

          # Check if a release (draft or published) already exists
          EXISTING_RELEASE=$(gh release view "$TAG_NAME" --json isDraft,id 2>/dev/null || echo "")

          if [[ -n "$EXISTING_RELEASE" ]]; then
            RELEASE_ID=$(echo "$EXISTING_RELEASE" | jq -r '.id')
            IS_DRAFT=$(echo "$EXISTING_RELEASE" | jq -r '.isDraft')
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
            echo "is_draft=$IS_DRAFT" >> $GITHUB_OUTPUT
            echo "ℹ️ Found existing release: $TAG_NAME (ID: $RELEASE_ID, Draft: $IS_DRAFT)"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No existing release found for: $TAG_NAME"
          fi

      - name: Delete existing draft release
        if: steps.check_draft.outputs.exists == 'true' && steps.check_draft.outputs.is_draft == 'true'
        env:
          GH_TOKEN: ${{ secrets.JELLYROCK_BOT_TOKEN }}
        run: |
          TAG_NAME="v${{ needs.validate-and-prepare.outputs.version }}"
          echo "🗑️ Deleting existing draft release: $TAG_NAME"
          gh release delete "$TAG_NAME" --yes
          echo "✅ Deleted existing draft release"

      - name: Create draft release
        env:
          GH_TOKEN: ${{ secrets.JELLYROCK_BOT_TOKEN }}
        run: |
          TAG_NAME="v${{ needs.validate-and-prepare.outputs.version }}"
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"

          # Sync changelog to ensure unreleased section is up to date
          npm run changelog:sync-unreleased

          # Use changelog syncer to format release notes (same logic as tag creation workflow)
          if [[ -f "CHANGELOG.md" ]]; then
            # Create temporary changelog to extract formatted release notes
            cp CHANGELOG.md CHANGELOG.md.backup
            node scripts/changelog-syncer.js sync-release "$VERSION"
            
            # Extract the newly created release section - handle the URL format correctly
            # The sync-release creates a section like: ## [1.0.1](https://github.com/...) - 2025-08-30
            # Use a more flexible pattern that matches the version in square brackets regardless of what follows
            RELEASE_NOTES=$(awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{if(flag) exit} flag" CHANGELOG.md)
            
            # Restore original changelog (don't commit changes in this workflow)
            mv CHANGELOG.md.backup CHANGELOG.md
            
            if [[ -z "$RELEASE_NOTES" || "$RELEASE_NOTES" == "" ]]; then
              RELEASE_NOTES="### No Changes Documented

              No changes were documented in CHANGELOG.md unreleased section."
            fi
          else
            RELEASE_NOTES="### No Changes Documented

            CHANGELOG.md not found."
          fi

          # Create release body
          RELEASE_BODY="## Release Schedule

          JellyRock $TAG_NAME is scheduled for release on the [Roku Channel Store](https://channelstore.roku.com/details/232f9e82db11ce628e3fe7e01382a330:a85d6e9e520567806e8dae1c0cabadd5/jellyrock) DAY, MONTH 27, 2025 5:00 PM PT

          $RELEASE_NOTES"

          gh release create "$TAG_NAME" \
            --title "$TAG_NAME" \
            --notes "$RELEASE_BODY" \
            --draft \
            --prerelease=false \
            out/${{ steps.create_zip.outputs.zip_name }}

          echo "✅ Created draft release: $TAG_NAME"
          echo "📝 Remember to add your scheduled release date before publishing!"
