name: Release Creation

on:
  push:
    branches:
      - main

jobs:
  check-and-create-release:
    runs-on: ubuntu-latest
    outputs:
      needs_release: ${{ steps.latest_tag.outputs.needs_release }}
      current_version: ${{ steps.current_version.outputs.current_version }}
    steps:
      - name: Debug Info
        run: |
          echo "🔍 Release Creation Workflow Debug Information:"
          echo "Branch: ${GITHUB_REF#refs/heads/}"
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"

      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: main
          token: ${{ secrets.JELLYROCK_BOT_TOKEN }}
          fetch-depth: 0 # Fetch all history to get tags

      - name: Extract current version from manifest
        id: current_version
        run: |
          # Extract version components from manifest
          MAJOR=$(grep "^major_version=" manifest | cut -d'=' -f2)
          MINOR=$(grep "^minor_version=" manifest | cut -d'=' -f2)
          BUILD=$(grep "^build_version=" manifest | cut -d'=' -f2)

          if [[ -z "$MAJOR" || -z "$MINOR" || -z "$BUILD" ]]; then
            echo "::error::Could not extract version from manifest"
            exit 1
          fi

          CURRENT_VERSION="$MAJOR.$MINOR.$BUILD"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "build_version=$BUILD" >> $GITHUB_OUTPUT
          echo "✅ Current manifest version: $CURRENT_VERSION"

      - name: Get latest tagged version
        id: latest_tag
        run: |
          # Get the latest semantic version tag
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)

          if [[ -z "$LATEST_TAG" ]]; then
            echo "No previous version tags found. This will be the first release."
            echo "latest_version=" >> $GITHUB_OUTPUT
            echo "needs_release=true" >> $GITHUB_OUTPUT
          else
            LATEST_VERSION=${LATEST_TAG#v}  # Remove 'v' prefix
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "✅ Latest tagged version: $LATEST_VERSION"
            
            # Compare versions
            CURRENT="${{ steps.current_version.outputs.current_version }}"
            if [[ "$CURRENT" != "$LATEST_VERSION" ]]; then
              echo "needs_release=true" >> $GITHUB_OUTPUT
              echo "🚀 Version mismatch detected: $CURRENT (manifest) != $LATEST_VERSION (latest tag)"
            else
              echo "needs_release=false" >> $GITHUB_OUTPUT
              echo "ℹ️ Versions match: $CURRENT == $LATEST_VERSION. No release needed."
            fi
          fi

      - name: Delete existing draft release if exists
        if: steps.latest_tag.outputs.needs_release == 'true'
        env:
          GH_TOKEN: ${{ secrets.JELLYROCK_BOT_TOKEN }}
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          TAG_NAME="v$CURRENT_VERSION"

          # Check if release already exists (draft or published)
          EXISTING_RELEASE=$(gh release view "$TAG_NAME" --json id,isDraft 2>/dev/null || echo "null")

          if [[ "$EXISTING_RELEASE" != "null" ]]; then
            echo "🗑️ Found existing release for $TAG_NAME, deleting it..."
            gh release delete "$TAG_NAME" --yes --cleanup-tag || true
            echo "✅ Existing release and tag deleted"
          else
            echo "ℹ️ No existing release found for tag: $TAG_NAME"
          fi

      - name: Build and create release
        if: steps.latest_tag.outputs.needs_release == 'true'
        run: |
          # Trigger the build workflow for release creation
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          echo "🚀 Starting build and release creation for v$CURRENT_VERSION..."

          # Set up environment for build workflow call
          echo "BUILD_TYPE=prod" >> $GITHUB_ENV
          echo "UPLOAD_ZIP=true" >> $GITHUB_ENV
          echo "CREATE_GITHUB_RELEASE=true" >> $GITHUB_ENV
  build-and-release:
    needs: check-and-create-release
    if: needs.check-and-create-release.outputs.needs_release == 'true'
    uses: ./.github/workflows/_build-app.yml
    with:
      build_type: "prod"
      upload_zip: true
      create_github_release: true
    secrets: inherit
