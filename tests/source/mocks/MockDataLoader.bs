import "pkg:/source/utils/misc.bs"

' Mock Data Loader
' Loads JSON mock data files for unit testing
' Supports loading servers, users, and devices from mocks/ directory
namespace MockDataLoader

  ' Load a mock server configuration
  ' @param {string} serverName - Name of server mock file (default, https-server, local-server)
  ' @returns {object} Server configuration object or invalid if file not found
  function LoadServer(serverName = "default" as string) as object
    filePath = "pkg:/source/mocks/servers/" + serverName + ".json"
    return loadJSONFile(filePath)
  end function

  ' Load a mock user configuration
  ' @param {string} userName - Name of user mock file (default, admin, restricted)
  ' @returns {object} User configuration object or invalid if file not found
  function LoadUser(userName = "default" as string) as object
    filePath = "pkg:/source/mocks/users/" + userName + ".json"
    return loadJSONFile(filePath)
  end function

  ' Load a mock device configuration
  ' @param {string} deviceName - Name of device mock file (default, roku-ultra, roku-express)
  ' @returns {object} Device configuration object or invalid if file not found
  function LoadDevice(deviceName = "default" as string) as object
    filePath = "pkg:/source/mocks/devices/" + deviceName + ".json"
    return loadJSONFile(filePath)
  end function

  ' Get list of all available mock servers
  ' @returns {array} Array of server names (without .json extension)
  function GetAvailableServers() as object
    return getFilesFromDirectory("pkg:/source/mocks/servers/")
  end function

  ' Get list of all available mock users
  ' @returns {array} Array of user names (without .json extension)
  function GetAvailableUsers() as object
    return getFilesFromDirectory("pkg:/source/mocks/users/")
  end function

  ' Get list of all available mock devices
  ' @returns {array} Array of device names (without .json extension)
  function GetAvailableDevices() as object
    return getFilesFromDirectory("pkg:/source/mocks/devices/")
  end function

  ' Internal: Get all .json files from a directory
  ' @param {string} dirPath - Full path to directory
  ' @returns {array} Array of file names without .json extension
  function getFilesFromDirectory(dirPath as string) as object
    files = []
    dir = CreateObject("roFileSystem")
    fileList = dir.findRecurseFiles(dirPath, "json")

    if isValidAndNotEmpty(fileList)
      for each filePath in fileList
        ' Extract filename from full path
        parts = filePath.split("/")
        fileName = parts[parts.count() - 1]
        ' Only process files with .json extension
        if fileName.endsWith(".json")
          fileName = Left(fileName, Len(fileName) - 5)
          files.push(fileName)
        end if
      end for
    end if

    return files
  end function

  ' Load mock API data (for testing transformers)
  ' @param {string} dataName - Name of API mock file without extension
  ' @returns {object} API data object or invalid if file not found
  function LoadApiData(dataName as string) as object
    filePath = "pkg:/source/mocks/api/" + dataName + ".json"
    return loadJSONFile(filePath)
  end function

  ' Internal: Load and parse a JSON file
  ' @param {string} filePath - Full path to JSON file
  ' @returns {object} Parsed JSON object or invalid if file not found/invalid
  function loadJSONFile(filePath as string) as object
    ' Read file contents
    fileContents = ReadAsciiFile(filePath)

    if not isValidAndNotEmpty(fileContents)
      return invalid
    end if

    ' Parse JSON
    jsonObject = ParseJson(fileContents)

    if not isValid(jsonObject)
      return invalid
    end if

    return jsonObject
  end function

end namespace
