
namespace tests

  @suite("misc.bs - Validation Utilities")
  class MiscValidationTests extends tests.BaseTestSuite

    protected override function setup()
      super.setup()
      ' Shared test data for all validation tests
      m.myArray = CreateObject("roArray", 3, true)
      m.myAssArray = {
        one: invalid,
        boolTrue: true,
        boolFalse: false,
        two: "invalid",
        three: 123.456,
        four: {
          five: {
            six: {
              name: "rooibos",
              noname: invalid
            }
          }
        },
        array: ["test", "test 2"]
      }
      m.myEmptyArray = CreateObject("roArray", 0, false)
      m.myEmptyList = CreateObject("roList")
      m.myList = CreateObject("roList")
      m.myList.AddTail("string")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("isValid(value)")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("returns true for valid boolean values")
    @params(true, true)
    @params(false, true)
    function _(value, expectedassertResult)
      m.assertEqual(isValid(value), expectedassertResult)
    end function

    @it("returns true for valid integer values")
    @params(-1234567890, true)
    @params(0, true)
    @params(1234567890, true)
    @params(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, true)
    function _(value, expectedassertResult)
      m.assertEqual(isValid(value), expectedassertResult)
    end function

    @it("returns true for valid float values")
    @params(-12.3456789, true)
    @params(12.3456789, true)
    @params(1.23456E+30, true)
    @params(12.3456789!, true)
    @params(123456789012345678901234567890123456789012345678901234567890.123456789012345678901234567890123456789012345678901234567890, true)
    function _(value, expectedassertResult)
      m.assertEqual(isValid(value), expectedassertResult)
    end function

    @it("returns true for valid string values")
    @params("", true)
    @params("             ", true)
    @params("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Augue neque gravida in fermentum et. Eget lorem dolor sed viverra ipsum nunc. At quis risus sed vulputate odio ut enim. Ultricies integer quis auctor elit sed. Egestas congue quisque egestas diam in. Aliquam sem fringilla ut morbi tincidunt. Malesuada bibendum arcu vitae elementum curabitur. Aliquet sagittis id consectetur purus ut faucibus pulvinar. Eget gravida cum sociis natoque. Sollicitudin aliquam ultrices sagittis orci. Ut etiam sit amet nisl purus. Luctus venenatis lectus magna fringilla urna porttitor rhoncus dolor purus. Vitae ultricies leo integer malesuada nunc. Vitae ultricies leo integer malesuada nunc vel risus commodo. Luctus accumsan tortor posuere ac ut. Urna cursus eget nunc scelerisque viverra mauris in. Accumsan sit amet nulla facilisi morbi tempus iaculis urna id. Mauris vitae ultricies leo integer malesuada nunc vel risus commodo. Morbi tincidunt augue interdum velit euismod in pellentesque.", true)
    @params("~!@#$%^&*()_-+=`\|]}';:.,/?", true)
    @params("true", true)
    @params("false", true)
    @params("invalid", true)
    function _(value, expectedassertResult)
      m.assertEqual(isValid(value), expectedassertResult)
    end function

    @it("returns true for valid array values")
    @params([0, 1, 2, 3, 4, 5], true)
    @params(["invalid", "one", "two", "three", "four", "five"], true)
    @params([invalid, invalid, invalid], true)
    function _(value, expectedassertResult)
      m.assertEqual(isValid(value), expectedassertResult)
    end function

    @it("returns true for valid associative array values")
    @params({ myInteger: 1, myString: "one", myInvalid: invalid, myEmptyString: "" }, true)
    function _(value, expectedassertResult)
      m.assertEqual(isValid(value), expectedassertResult)
    end function

    @it("returns true for valid array of associative arrays")
    @params(
    [
      {
        Title: "The Notebook",
        releaseDate: "2000"
      },
      {
        Title: "Caddyshack",
        releaseDate: "1976"
      }
    ], true)
    function _(value, expectedassertResult)
      m.assertEqual(isValid(value), expectedassertResult)
    end function

    @it("validates values within associative arrays")
    function _()
      m.assertEqual(isValid(m.myAssArray.one), false)
      m.assertEqual(isValid(m.myAssArray.two), true)
    end function

    @it("returns false when accessing invalid array index")
    function _()
      m.assertEqual(isValid(m.myAssArray.zero), false)
    end function

    @it("returns false for invalid value")
    @params(invalid, false)
    function _(value, expectedassertResult)
      m.assertEqual(isValid(value), expectedassertResult)
    end function

    @it("returns true for valid node types")
    @params("#RBSNode", true)
    @params("#RBSNode|Group", true)
    @params("#RBSNode|Label", true)
    @params("#RBSNode|ScrollingLabel", true)
    @params("#RBSNode|Poster", true)
    @params("#RBSNode|Rectangle", true)
    @params("#RBSNode|Font", true)
    @params("#RBSNode|Button", true)
    @params("#RBSNode|Overhang", true)
    @params("#RBSNode|Audio", true)
    @params("#RBSNode|Video", true)
    function _(value, expectedassertResult)
      m.assertEqual(isValid(value), expectedassertResult)
    end function

    @it("returns true for valid Roku objects")
    function _()
      myList = CreateObject("roList")
      myLongInteger = CreateObject("roLongInteger")
      myDouble = CreateObject("roDouble")
      myFloat = CreateObject("roFloat")
      myInvalid = CreateObject("roInvalid")
      m.assertEqual(isValid(myList), true)
      m.assertEqual(isValid(myLongInteger), true)
      m.assertEqual(isValid(myDouble), true)
      m.assertEqual(isValid(myFloat), true)
      m.assertEqual(isValid(myInvalid), false)
    end function

    @it("returns true for valid function return values")
    function _()
      myfunc = function(a, b)
        return a + b
      end function
      m.assertEqual(isValid(myfunc(0, 1)), true)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("isValidAndNotEmpty(value)")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("returns false for invalid value")
    @params(invalid, false)
    function _(value, expectedassertResult)
      m.assertEqual(isValidAndNotEmpty(value), expectedassertResult)
    end function

    @it("validates strings are not empty")
    @params("", false)
    @params("             ", false)
    @params("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Augue neque gravida in fermentum et. Eget lorem dolor sed viverra ipsum nunc. At quis risus sed vulputate odio ut enim. Ultricies integer quis auctor elit sed. Egestas congue quisque egestas diam in. Aliquam sem fringilla ut morbi tincidunt. Malesuada bibendum arcu vitae elementum curabitur. Aliquet sagittis id consectetur purus ut faucibus pulvinar. Eget gravida cum sociis natoque. Sollicitudin aliquam ultrices sagittis orci. Ut etiam sit amet nisl purus. Luctus venenatis lectus magna fringilla urna porttitor rhoncus dolor purus. Vitae ultricies leo integer malesuada nunc. Vitae ultricies leo integer malesuada nunc vel risus commodo. Luctus accumsan tortor posuere ac ut. Urna cursus eget nunc scelerisque viverra mauris in. Accumsan sit amet nulla facilisi morbi tempus iaculis urna id. Mauris vitae ultricies leo integer malesuada nunc vel risus commodo. Morbi tincidunt augue interdum velit euismod in pellentesque.", true)
    @params("~!@#$%^&*()_-+=`\|]}';:.,/?", true)
    @params("true", true)
    @params("false", true)
    @params("invalid", true)
    function _(value, expectedassertResult)
      m.assertEqual(isValidAndNotEmpty(value), expectedassertResult)
    end function

    @it("validates arrays are not empty")
    function _()
      m.assertEqual(isValidAndNotEmpty(m.myEmptyArray), false)
      m.assertEqual(isValidAndNotEmpty(m.myArray), false)
      m.myArray.Push("string")
      m.assertEqual(isValidAndNotEmpty(m.myArray), true)
      m.myArray.Clear()
      m.assertEqual(isValidAndNotEmpty(m.myArray), false)
    end function

    @it("validates associative arrays are not empty")
    function _()
      m.assertEqual(isValidAndNotEmpty(m.myEmptyArray), false)
      m.assertEqual(isValidAndNotEmpty(m.myAssArray), true)
    end function

    @it("validates lists are not empty")
    function _()
      m.assertEqual(isValidAndNotEmpty(m.myEmptyList), false)
      m.assertEqual(isValidAndNotEmpty(m.myList), true)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("isAllValid(values)")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("validates all boolean values are valid")
    @params([true, true], true)
    @params([false, false, false, false], true)
    @params([true, false, true, false], true)
    @params([true, false, invalid, false], false)
    function _(value, expectedassertResult)
      m.assertEqual(isAllValid(value), expectedassertResult)
    end function

    @it("validates all integer values are valid")
    @params([-1234567890, -423, 123, 0987654], true)
    @params([0, 0, 0, 0, 0, 0], true)
    @params([1234567890, -1, 0, 1, 0, -999999999999], true)
    @params([1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 5, 9, 3], true)
    @params([1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 5, invalid, 3], false)
    function _(value, expectedassertResult)
      m.assertEqual(isAllValid(value), expectedassertResult)
    end function

    @it("validates all float values are valid")
    @params([-12.3456789, 12.3456789, 1.23456E+30, 12.3456789!, 123456789012345678901234567890123456789012345678901234567890.123456789012345678901234567890123456789012345678901234567890], true)
    @params([-12.3456789, 12.3456789, invalid, 1.23456E+30, 12.3456789!, 123456789012345678901234567890123456789012345678901234567890.123456789012345678901234567890123456789012345678901234567890], false)
    function _(value, expectedassertResult)
      m.assertEqual(isAllValid(value), expectedassertResult)
    end function

    @it("validates all string values are valid")
    @params(["", "             ", "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Augue neque gravida in fermentum et. Eget lorem dolor sed viverra ipsum nunc. At quis risus sed vulputate odio ut enim. Ultricies integer quis auctor elit sed. Egestas congue quisque egestas diam in. Aliquam sem fringilla ut morbi tincidunt. Malesuada bibendum arcu vitae elementum curabitur. Aliquet sagittis id consectetur purus ut faucibus pulvinar. Eget gravida cum sociis natoque. Sollicitudin aliquam ultrices sagittis orci. Ut etiam sit amet nisl purus. Luctus venenatis lectus magna fringilla urna porttitor rhoncus dolor purus. Vitae ultricies leo integer malesuada nunc. Vitae ultricies leo integer malesuada nunc vel risus commodo. Luctus accumsan tortor posuere ac ut. Urna cursus eget nunc scelerisque viverra mauris in. Accumsan sit amet nulla facilisi morbi tempus iaculis urna id. Mauris vitae ultricies leo integer malesuada nunc vel risus commodo. Morbi tincidunt augue interdum velit euismod in pellentesque."], true)
    @params(["~!@#$%^&*()_-+=`\|]}';:.,/?", "true", "false", "invalid"], true)
    @params(["~!@#$%^&*()_-+=`\|]}';:.,/?", "true", "false", invalid], false)
    function _(value, expectedassertResult)
      m.assertEqual(isAllValid(value), expectedassertResult)
    end function

    @it("validates all array values are valid")
    @params([0, 1, 2, 3, 4, 5], true)
    @params(["invalid", "one", "two", "three", "four", "five"], true)
    @params([invalid, invalid, invalid], false)
    @params([[invalid, invalid, invalid], [], [0, 1, 2, 3, 4, 5]], true)
    function _(value, expectedassertResult)
      m.assertEqual(isAllValid(value), expectedassertResult)
    end function

    @it("validates all values in array of associative arrays")
    @params(
    [
      {
        Title: "The Notebook",
        releaseDate: "2000"
      },
      {
        Title: "Caddyshack",
        releaseDate: "1976"
      }
    ], true)
    @params(
    [
      {
        Title: "The Notebook",
        releaseDate: "2000"
      },
      {
        Title: "Caddyshack",
        releaseDate: "1976"
      },
      invalid
    ], false)
    function _(value, expectedassertResult)
      m.assertEqual(isAllValid(value), expectedassertResult)
    end function

    @it("validates values from associative array access")
    function _()
      m.assertEqual(isAllValid([m.myAssArray.one, m.myAssArray.two]), false)
      m.assertEqual(isAllValid([m.myAssArray.three, m.myAssArray.two]), true)
    end function

    @it("returns false when accessing invalid array index in isAllValid")
    function _()
      m.assertEqual(isAllValid([m.myAssArray.zero]), false)
    end function

    @it("returns false when array contains invalid")
    @params([invalid], false)
    function _(value, expectedassertResult)
      m.assertEqual(isAllValid(value), expectedassertResult)
    end function

    @it("validates all node values are valid")
    @params(["#RBSNode", "#RBSNode|Group"], true)
    @params(["#RBSNode|Label", "#RBSNode|ScrollingLabel"], true)
    @params(["#RBSNode|Poster", "#RBSNode|Rectangle"], true)
    @params(["#RBSNode|Font", "#RBSNode|Button"], true)
    @params(["#RBSNode|Rectangle", "#RBSNode|Overhang"], true)
    @params(["#RBSNode|Audio", "#RBSNode|Video"], true)
    function _(value, expectedassertResult)
      m.assertEqual(isAllValid([value]), expectedassertResult)
    end function

    @it("validates all Roku objects are valid")
    function _()
      myList = CreateObject("roList")
      myLongInteger = CreateObject("roLongInteger")
      myDouble = CreateObject("roDouble")
      myFloat = CreateObject("roFloat")
      myInvalid = CreateObject("roInvalid")
      m.assertEqual(isAllValid([myList, myLongInteger]), true)
      m.assertEqual(isAllValid([myDouble, myFloat]), true)
      m.assertEqual(isAllValid([myInvalid]), false)
    end function

    @it("validates all function return values are valid")
    function _()
      myfunc = function(a, b)
        return a + b
      end function
      myInvalidfunc = function()
        return invalid
      end function
      m.assertEqual(isAllValid([myfunc(0, 1), myfunc(1, 0)]), true)
      m.assertEqual(isAllValid([myfunc(0, 1), myInvalidfunc()]), false)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("isChainValid(obj, path)")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("validates nested object property chains")
    function _()
      m.assertEqual(isChainValid(m.myAssArray, "boolTrue"), true)
      m.assertEqual(isChainValid(m.myAssArray, "boolFalse"), true)
      m.assertEqual(isChainValid(m.myAssArray, "two"), true)
      m.assertEqual(isChainValid(m.myAssArray, "three"), true)
      m.assertEqual(isChainValid(m.myAssArray, "four"), true)
      m.assertEqual(isChainValid(m.myAssArray, "four.five"), true)
      m.assertEqual(isChainValid(m.myAssArray, "four.five.six"), true)
      m.assertEqual(isChainValid(m.myAssArray, "four.five.six.name"), true)
      m.assertEqual(isChainValid(m.myAssArray.four, "five.six.name"), true)
      m.assertEqual(isChainValid(m.myAssArray.four.five, "six.name"), true)
      m.assertEqual(isChainValid(m.myAssArray.four.five.six, "name"), true)
      m.assertEqual(isChainValid(m.myAssArray.four.five.six, ""), true)
      m.assertEqual(isChainValid(m.myAssArray, "array"), true)
    end function

    @it("returns false for invalid property chains")
    function _()
      m.assertEqual(isChainValid(m.myAssArray, "one"), false)
      m.assertEqual(isChainValid(m.myAssArray, "none"), false)
      m.assertEqual(isChainValid(m.myAssArray, "four.five.none"), false)
      m.assertEqual(isChainValid(m.myAssArray.four.five.six, "noname"), false)
      m.assertEqual(isChainValid(invalid, "one"), false)
    end function

  end class

end namespace
