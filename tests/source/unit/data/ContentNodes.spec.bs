namespace tests
  @suite("ContentNodes - JellyfinBaseItem, JellyfinServer, JellyfinUser")
  class ContentNodeTests extends tests.BaseTestSuite

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("JellyfinBaseItem")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("creates with default values")
    function _()
      item = CreateObject("roSGNode", "JellyfinBaseItem")

      m.assertEqual(item.id, "")
      m.assertEqual(item.type, "")
      m.assertEqual(item.name, "")
      m.assertEqual(item.isWatched, false)
      m.assertEqual(item.runTimeTicks, 0&)
      m.assertEqual(item.communityRating, 0.0)
    end function

    @it("uses id as sentinel value for loading state")
    function _()
      item = CreateObject("roSGNode", "JellyfinBaseItem")

      ' id="" means not loaded
      m.assertEqual(item.id, "")

      ' Set id = item is loaded
      item.id = "test123"
      item.name = "Test"

      ' Item is valid with id
      m.assertNotEqual(item.id, "")
    end function

    @it("accepts field assignments")
    function _()
      item = CreateObject("roSGNode", "JellyfinBaseItem")

      item.id = "test123"
      item.type = "Movie"
      item.name = "Test Movie"
      item.isWatched = true

      m.assertEqual(item.id, "test123")
      m.assertEqual(item.type, "Movie")
      m.assertEqual(item.name, "Test Movie")
      m.assertEqual(item.isWatched, true)
    end function

    @it("handles array fields")
    function _()
      item = CreateObject("roSGNode", "JellyfinBaseItem")

      item.genres = ["Action", "Comedy"]
      item.studios = ["Studio A"]

      m.assertEqual(item.genres.Count(), 2)
      m.assertEqual(item.genres[0], "Action")
      m.assertEqual(item.studios.Count(), 1)
    end function

    @it("handles all numeric field types correctly")
    function _()
      item = CreateObject("roSGNode", "JellyfinBaseItem")

      ' Test longinteger fields
      item.runTimeTicks = 123456789&
      item.playbackPositionTicks = 987654321&
      item.transformedAt = 1234567890&

      ' Test integer fields
      item.productionYear = 2024
      item.indexNumber = 5
      item.parentIndexNumber = 2
      item.playCount = 10
      item.unplayedItemCount = 3

      ' Test float fields
      item.communityRating = 8.5
      item.criticRating = 7.2
      item.playedPercentage = 45.5

      m.assertEqual(item.runTimeTicks, 123456789&)
      m.assertEqual(item.productionYear, 2024)
      m.assertEqual(item.communityRating, 8.5)
    end function

    @it("handles all image tag fields")
    function _()
      item = CreateObject("roSGNode", "JellyfinBaseItem")

      item.primaryImageTag = "abc123"
      item.backdropImageTags = ["tag1", "tag2", "tag3"]
      item.thumbImageTag = "thumb456"
      item.logoImageTag = "logo789"
      item.parentPrimaryImageTag = "parent123"
      item.seriesPrimaryImageTag = "series456"

      m.assertEqual(item.primaryImageTag, "abc123")
      m.assertEqual(item.backdropImageTags.Count(), 3)
      m.assertEqual(item.thumbImageTag, "thumb456")
      m.assertEqual(item.logoImageTag, "logo789")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("JellyfinServer")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("creates with default values")
    function _()
      serverNode = CreateObject("roSGNode", "JellyfinServer")

      m.assertEqual(serverNode.id, "")
      m.assertEqual(serverNode.version, "")
      m.assertEqual(serverNode.isLoaded, false)
      m.assertEqual(serverNode.isConnected, false)
    end function

    @it("manages loading state")
    function _()
      serverNode = CreateObject("roSGNode", "JellyfinServer")

      m.assertEqual(serverNode.isLoaded, false)

      serverNode.isLoaded = true
      serverNode.isConnected = true
      serverNode.lastConnected = CreateObject("roDateTime").AsSeconds()

      m.assertEqual(serverNode.isLoaded, true)
      m.assertEqual(serverNode.isConnected, true)
      m.assertTrue(serverNode.lastConnected > 0)
    end function

    @it("tracks connection state transitions")
    function _()
      serverNode = CreateObject("roSGNode", "JellyfinServer")

      ' Initial state: not loaded, not connected
      m.assertEqual(serverNode.isLoaded, false)
      m.assertEqual(serverNode.isConnected, false)
      m.assertEqual(serverNode.lastConnected, 0&)

      ' Loaded but not connected (error scenario)
      serverNode.isLoaded = true
      serverNode.isConnected = false
      m.assertEqual(serverNode.isLoaded, true)
      m.assertEqual(serverNode.isConnected, false)

      ' Fully connected
      serverNode.isConnected = true
      serverNode.lastConnected = 1234567890&
      m.assertEqual(serverNode.isConnected, true)
      m.assertEqual(serverNode.lastConnected, 1234567890&)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("JellyfinUser")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("creates with nested config and policy nodes")
    function _()
      userNode = CreateObject("roSGNode", "JellyfinUser")

      ' Verify nested nodes are created
      m.assertInvalid(userNode.config)
      m.assertInvalid(userNode.policy)

      ' Create nested nodes manually for testing
      userNode.config = CreateObject("roSGNode", "JellyfinUserConfiguration")
      userNode.policy = CreateObject("roSGNode", "JellyfinUserPolicy")

      ' Verify default values on nested nodes
      m.assertEqual(userNode.config.enableNextEpisodeAutoPlay, false)
      m.assertEqual(userNode.policy.isAdministrator, false)
      m.assertEqual(userNode.policy.enableMediaPlayback, true)
    end function

    @it("uses id and authToken as sentinels")
    function _()
      userNode = CreateObject("roSGNode", "JellyfinUser")

      ' Empty id = not authenticated
      m.assertEqual(userNode.id, "")
      m.assertEqual(userNode.authToken, "")

      ' Set values = authenticated
      userNode.id = "user123"
      userNode.authToken = "token123"
      m.assertNotEqual(userNode.id, "")
    end function

    @it("has settings node field")
    function _()
      userNode = CreateObject("roSGNode", "JellyfinUser")
      settings = CreateObject("roSGNode", "JellyfinUserSettings")

      userNode.settings = settings

      m.assertTrue(isValid(userNode.settings))
      m.assertEqual(userNode.settings.subtype(), "JellyfinUserSettings")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("JellyfinUserSettings")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("creates with default values")
    function _()
      settings = CreateObject("roSGNode", "JellyfinUserSettings")

      m.assertEqual(settings.uiRowLayout, "")
      m.assertEqual(settings.uiDesignHideClock, false)
      m.assertEqual(settings.homeSection0, "")
    end function

    @it("accepts all UI settings field assignments")
    function _()
      settings = CreateObject("roSGNode", "JellyfinUserSettings")

      settings.uiRowLayout = "fullwidth"
      settings.uiDesignHideClock = true
      settings.uiGeneralEpisodeImages = "always"
      settings.uiTvShowsDisableUnwatchedCount = true
      settings.uiHomeUseWebArrangement = true
      settings.uiFontFallback = true

      m.assertEqual(settings.uiRowLayout, "fullwidth")
      m.assertEqual(settings.uiDesignHideClock, true)
      m.assertEqual(settings.uiGeneralEpisodeImages, "always")
      m.assertEqual(settings.uiTvShowsDisableUnwatchedCount, true)
      m.assertEqual(settings.uiHomeUseWebArrangement, true)
      m.assertEqual(settings.uiFontFallback, true)
    end function

    @it("accepts all home section field assignments")
    function _()
      settings = CreateObject("roSGNode", "JellyfinUserSettings")

      settings.homeSection0 = "resumeVideo"
      settings.homeSection1 = "nextUp"
      settings.homeSection2 = "latestMovies"
      settings.homeSection3 = "latestShows"
      settings.homeSection4 = "latestMusic"
      settings.homeSection5 = "liveTV"
      settings.homeSection6 = "favorites"

      m.assertEqual(settings.homeSection0, "resumeVideo")
      m.assertEqual(settings.homeSection1, "nextUp")
      m.assertEqual(settings.homeSection2, "latestMovies")
      m.assertEqual(settings.homeSection3, "latestShows")
      m.assertEqual(settings.homeSection4, "latestMusic")
      m.assertEqual(settings.homeSection5, "liveTV")
      m.assertEqual(settings.homeSection6, "favorites")
    end function

    @it("accepts all other settings field assignments")
    function _()
      settings = CreateObject("roSGNode", "JellyfinUserSettings")

      settings.displayLiveTvLanding = "guide"
      settings.globalRememberMe = true
      settings.liveTvCanRecord = true
      settings.contentCanDelete = true

      m.assertEqual(settings.displayLiveTvLanding, "guide")
      m.assertEqual(settings.globalRememberMe, true)
      m.assertEqual(settings.liveTvCanRecord, true)
      m.assertEqual(settings.contentCanDelete, true)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("AppInfo")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("creates with default values")
    function _()
      appInfo = CreateObject("roSGNode", "AppInfo")

      m.assertEqual(appInfo.appId, "")
      m.assertEqual(appInfo.isDev, false)
      m.assertEqual(appInfo.version, "")
      m.assertEqual(appInfo.lastRunVersion, "")
    end function

    @it("accepts all application field assignments")
    function _()
      appInfo = CreateObject("roSGNode", "AppInfo")

      appInfo.appId = "dev"
      appInfo.isDev = true
      appInfo.version = "2.1.0"
      appInfo.lastRunVersion = "2.0.5"

      m.assertEqual(appInfo.appId, "dev")
      m.assertEqual(appInfo.isDev, true)
      m.assertEqual(appInfo.version, "2.1.0")
      m.assertEqual(appInfo.lastRunVersion, "2.0.5")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("DeviceInfo")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("creates with default values")
    function _()
      deviceInfo = CreateObject("roSGNode", "DeviceInfo")

      m.assertEqual(deviceInfo.id, "")
      m.assertEqual(deviceInfo.name, "")
      m.assertEqual(deviceInfo.model, "")
      m.assertEqual(deviceInfo.memoryLevel, "normal")
      m.assertEqual(deviceInfo.canPlay4K, false)
    end function

    @it("accepts all device identity field assignments")
    function _()
      deviceInfo = CreateObject("roSGNode", "DeviceInfo")

      deviceInfo.id = "device123"
      deviceInfo.name = "Roku Ultra"
      deviceInfo.model = "4800X"
      deviceInfo.serial = "ABC123"
      deviceInfo.friendlyName = "Living Room Roku"
      deviceInfo.serverDeviceName = "LivingRoomRoku"
      deviceInfo.modelType = "STB"

      m.assertEqual(deviceInfo.id, "device123")
      m.assertEqual(deviceInfo.name, "Roku Ultra")
      m.assertEqual(deviceInfo.model, "4800X")
      m.assertEqual(deviceInfo.serial, "ABC123")
      m.assertEqual(deviceInfo.friendlyName, "Living Room Roku")
      m.assertEqual(deviceInfo.serverDeviceName, "LivingRoomRoku")
      m.assertEqual(deviceInfo.modelType, "STB")
    end function

    @it("accepts all video capability field assignments")
    function _()
      deviceInfo = CreateObject("roSGNode", "DeviceInfo")

      deviceInfo.videoHeight = 2160
      deviceInfo.videoWidth = 3840
      deviceInfo.maxVideoHeight = 2160
      deviceInfo.maxVideoWidth = 3840
      deviceInfo.canPlay4K = true

      m.assertEqual(deviceInfo.videoHeight, 2160)
      m.assertEqual(deviceInfo.videoWidth, 3840)
      m.assertEqual(deviceInfo.maxVideoHeight, 2160)
      m.assertEqual(deviceInfo.maxVideoWidth, 3840)
      m.assertEqual(deviceInfo.canPlay4K, true)
    end function

    @it("accepts all codec support field assignments")
    function _()
      deviceInfo = CreateObject("roSGNode", "DeviceInfo")

      deviceInfo.videoCodecs = ["h264", "hevc", "vp9"]
      deviceInfo.audioCodecs = ["aac", "mp3", "ac3"]

      m.assertEqual(deviceInfo.videoCodecs.Count(), 3)
      m.assertEqual(deviceInfo.videoCodecs[0], "h264")
      m.assertEqual(deviceInfo.audioCodecs.Count(), 3)
      m.assertEqual(deviceInfo.audioCodecs[0], "aac")
    end function

    @it("accepts performance field assignments")
    function _()
      deviceInfo = CreateObject("roSGNode", "DeviceInfo")

      deviceInfo.memoryLevel = "high"
      deviceInfo.memoryTotal = 2048

      m.assertEqual(deviceInfo.memoryLevel, "high")
      m.assertEqual(deviceInfo.memoryTotal, 2048)
    end function

  end class
end namespace

