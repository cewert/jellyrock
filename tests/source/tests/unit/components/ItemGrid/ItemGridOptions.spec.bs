namespace tests.components.ItemGrid

  @suite("ItemGridOptions Component Tests")
  class ItemGridOptionsTests extends tests.BaseTestSuite

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("optionsSet - sortAscending field handling")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("should handle boolean Ascending value from options")
    function _()
      ' ARRANGE
      options = {
        sort: [
          { Title: "Title", Name: "SortName", Selected: true, Ascending: true }
        ]
      }

      ' ACT
      m.testComponent = m.top.CreateChild("ItemGridOptions")
      m.testComponent.options = options

      ' ASSERT
      m.assertEqual(m.testComponent.sortAscending, true)
    end function

    @it("should handle string 'true' Ascending value from options")
    function _()
      ' ARRANGE
      options = {
        sort: [
          { Title: "Title", Name: "SortName", Selected: true, Ascending: "true" }
        ]
      }

      ' ACT
      m.testComponent = m.top.CreateChild("ItemGridOptions")
      m.testComponent.options = options

      ' ASSERT
      m.assertEqual(m.testComponent.sortAscending, true)
    end function

    @it("should handle string 'false' Ascending value from options")
    function _()
      ' ARRANGE
      options = {
        sort: [
          { Title: "Title", Name: "SortName", Selected: true, Ascending: "false" }
        ]
      }

      ' ACT
      m.testComponent = m.top.CreateChild("ItemGridOptions")
      m.testComponent.options = options

      ' ASSERT
      m.assertEqual(m.testComponent.sortAscending, false)
    end function

    @it("should handle boolean false Ascending value from options")
    function _()
      ' ARRANGE
      options = {
        sort: [
          { Title: "Title", Name: "SortName", Selected: true, Ascending: false }
        ]
      }

      ' ACT
      m.testComponent = m.top.CreateChild("ItemGridOptions")
      m.testComponent.options = options

      ' ASSERT
      m.assertEqual(m.testComponent.sortAscending, false)
    end function

    @it("should handle Selected as string 'true'")
    function _()
      ' ARRANGE - Test if Selected field can also be a string
      options = {
        sort: [
          { Title: "Title", Name: "SortName", Selected: "true", Ascending: true }
        ]
      }

      ' ACT
      m.testComponent = m.top.CreateChild("ItemGridOptions")
      m.testComponent.options = options

      ' ASSERT - Should still work
      m.assertEqual(m.testComponent.sortAscending, true)
    end function

    @it("should handle case-insensitive string 'True' Ascending value")
    function _()
      ' ARRANGE - Test case sensitivity
      options = {
        sort: [
          { Title: "Title", Name: "SortName", Selected: true, Ascending: "True" }
        ]
      }

      ' ACT
      m.testComponent = m.top.CreateChild("ItemGridOptions")
      m.testComponent.options = options

      ' ASSERT
      m.assertEqual(m.testComponent.sortAscending, true)
    end function

    @it("should handle case-insensitive string 'FALSE' Ascending value")
    function _()
      ' ARRANGE - Test case sensitivity
      options = {
        sort: [
          { Title: "Title", Name: "SortName", Selected: true, Ascending: "FALSE" }
        ]
      }

      ' ACT
      m.testComponent = m.top.CreateChild("ItemGridOptions")
      m.testComponent.options = options

      ' ASSERT
      m.assertEqual(m.testComponent.sortAscending, false)
    end function

  end class

end namespace
