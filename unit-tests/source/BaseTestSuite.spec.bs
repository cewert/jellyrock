import "pkg:/source/utils/globals.bs"
import "pkg:/source/utils/session.bs"
import "mocks/MockDataLoader.bs"

namespace tests

  class BaseTestSuite extends rooibos.BaseTestSuite
    private appController

    protected override sub setup()
      ' Initialize m.global if not already initialized
      if not isValid(m.global)
        ' In test environment, m.global needs to be created from a scene
        ' Try to get it from the test scene if available
        m.global = m.top?.getGlobalNode()
        if not isValid(m.global)
          ' Cannot continue without m.global
          throw "Failed to initialize m.global"
        end if
      end if

      ' ===================================================================
      ' Use ACTUAL main app initialization functions
      ' This ensures tests use identical global state as production
      ' ===================================================================

      try
        ' Initialize global constants, app info, and device info
        ' This creates: m.global.appLoaded, m.global.constants, m.global.app, m.global.device
        setGlobals()
      catch e
        ' If setGlobals() fails (e.g., roAppInfo/roDeviceInfo not available in test env),
        ' create minimal mock data to allow tests to run
        if not m.global.doesExist("constants")
          m.global.addFields({
            appLoaded: false,
            constants: {
              colors: {
                primary: "0x8b5cf6FF",
                secondary: "0x3b82f6FF",
                text_primary: "0xf0f0f0FF"
              },
              font_sizes: {
                medium: 32
              }
            },
            app: {
              id: "test-app",
              isDev: true,
              version: "0.0.0",
              lastRunVersion: ""
            },
            device: {
              id: "test-device",
              name: "Test Device",
              videoHeight: "1080",
              videoWidth: "1920"
            }
          })
        end if
      end try

      ' Initialize session structure manually to avoid registry/file system issues in tests
      ' Note: We don't call session.Init() directly because it calls SaveDefaults()
      ' which reads from settings.json and registry, which may fail in test environment
      if not m.global.doesExist("session")
        m.global.addFields({
          session: {
            memoryLevel: "normal",
            server: {},
            user: {
              Configuration: {},
              Policy: {},
              settings: {},
              lastRunVersion: invalid,
              fontScaleFactor: 1.0
            },
            video: {
              json: {}
            }
          }
        })
      end if

      ' ===================================================================
      ' Override with test-specific mock data
      ' Load mock data from JSON files for easy editing and testing
      ' ===================================================================

      ' Load mock server (default, https-server, or local-server)
      mockServer = MockDataLoader.LoadServer("default")
      if not isValid(mockServer)
        throw "Failed to load mock server data from JSON"
      end if

      tmpSession = m.global.session
      tmpSession.server = mockServer
      m.global.setFields({ session: tmpSession })

      ' Load mock user (default, admin, or restricted)
      mockUser = MockDataLoader.LoadUser("default")
      if not isValid(mockUser)
        throw "Failed to load mock user data from JSON"
      end if

      tmpSession = m.global.session
      tmpSession.user.id = mockUser.id
      tmpSession.user.name = mockUser.name
      tmpSession.user.Configuration = mockUser.Configuration
      tmpSession.user.Policy = mockUser.Policy
      m.global.setFields({ session: tmpSession })

      ' Initialize roku-log if not already initialized
      ' The roku-log-bsc-plugin should auto-initialize, but we ensure it exists
      if isValid(m.global) and not isValid(m.global.rLog)
        ' Create a proper log_Log component for roku-log
        rLog = CreateObject("roSGNode", "log_Log")
        if isValid(rLog)
          ' Set up minimal transport (PrintTransport for console output)
          rLog.transportTypes = ["log_PrintTransport"]
          rLog.logLevel = 3 ' VERBOSE level (0=ERROR, 1=WARN, 2=INFO, 3=VERBOSE, 4=DEBUG)
          rLog.enabled = true
          rLog.isFiltering = false
          rLog.includeDate = false
          rLog.includeFilters = {}
          rLog.excludeFilters = {}
          rLog.logMode = 1
          rLog.transports = []

          ' Add to global
          m.global.addFields({ rLog: rLog })

          ' Add logIndent fields that roku-log expects
          if not m.global.doesExist("logIndent")
            m.global.addFields({ logIndent: 0 })
          end if
          if not m.global.doesExist("logIndentText")
            m.global.addFields({ logIndentText: "" })
          end if
        end if
      end if
    end sub

    protected override function beforeEach()
      ' Reset or verify session state before each test if needed
      ' This ensures tests don't interfere with each other
      if isValid(m.global) and isValid(m.global.session)
        ' Ensure server URL is always valid for image URL generation
        ' Reload from JSON if somehow lost during test
        if not isValidAndNotEmpty(m.global.session.server?.url)
          mockServer = MockDataLoader.LoadServer("default")
          if isValid(mockServer)
            tmpSession = m.global.session
            tmpSession.server = mockServer
            m.global.setFields({ session: tmpSession })
          end if
        end if
      end if
    end function

    protected override function afterEach()
      ' Clean up any test-specific modifications
      ' Leave the base mock intact for other tests
    end function
  end class
end namespace
