import "pkg:/source/api/baserequest.bs"
import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/utils/config.bs"
import "pkg:/source/utils/misc.bs"

sub init()
  m.log = log.Logger("recordProgramTask")
  m.top.functionName = "RecordOrCancelProgram"
end sub

sub RecordOrCancelProgram()
  if isValid(m.top.programDetails)
    ' Are we setting up a recording or canceling one?
    timerId = invalid
    if isValid(m.top.programDetails.json.timerId) and m.top.programDetails.json.timerId <> ""
      timerId = m.top.programDetails.json.timerId
    end if

    if not isValid(timerId)
      ' Setting up a recording...
      programId = m.top.programDetails.id

      ' Get Live TV default params from server...
      url = "LiveTv/Timers/Defaults"
      params = {
        programId: programId
      }

      resp = APIRequest(url, params)
      data = getJson(resp)

      if isValid(data)
        ' Create recording timer...
        if m.top.recordSeries = true
          url = "LiveTv/SeriesTimers"
        else
          url = "LiveTv/Timers"
        end if
        resp = APIRequest(url)
        postJson(resp, FormatJson(data))
        m.top.programDetails.hdSmallIconUrl = "pkg:/images/red.png"
      else
        ' Error msg to user?
        m.log.error("Could not retrieve live TV Defaults from Server")
      end if
    else
      ' Cancelling a recording...
      if m.top.recordSeries = true
        timerId = m.top.programDetails.json.SeriesTimerId
        url = Substitute("LiveTv/SeriesTimers/{0}", timerId)
      else
        url = Substitute("LiveTv/Timers/{0}", timerId)
      end if
      resp = APIRequest(url)
      deleteVoid(resp)
      m.top.programDetails.hdSmallIconUrl = invalid
    end if
  end if

  m.top.recordOperationDone = true
end sub
