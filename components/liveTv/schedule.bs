import "pkg:/source/utils/misc.bs"

sub init()
  m.epgLaunchCompleteSignaled = false
  m.scheduleGrid = m.top.findNode("scheduleGrid")
  m.detailsPane = m.top.findNode("detailsPane")

  m.detailsPane.observeField("watchSelectedChannel", "onWatchChannelSelected")
  m.detailsPane.observeField("recordSelectedChannel", "onRecordChannelSelected")
  m.detailsPane.observeField("recordSeriesSelectedChannel", "onRecordSeriesChannelSelected")
  m.gridStartDate = CreateObject("roDateTime")
  m.scheduleGrid.contentStartTime = m.gridStartDate.AsSeconds() - 1800
  m.gridEndDate = createObject("roDateTime")
  m.gridEndDate.FromSeconds(m.gridStartDate.AsSeconds() + (24 * 60 * 60))

  m.scheduleGrid.observeField("programFocused", "onProgramFocused")
  m.scheduleGrid.observeField("programSelected", "onProgramSelected")
  m.scheduleGrid.observeField("leftEdgeTargetTime", "onGridScrolled")
  m.scheduleGrid.channelInfoWidth = 350

  m.gridMoveAnimation = m.top.findNode("gridMoveAnimation")
  m.gridMoveAnimationPosition = m.top.findNode("gridMoveAnimationPosition")

  m.loadChannelsTask = createObject("roSGNode", "loadChannelsTask")
  m.loadChannelsTask.observeField("channels", "onChannelsLoaded")
  m.loadChannelsTask.control = "RUN"

  m.top.lastFocus = m.scheduleGrid

  m.channelIndex = {}
end sub

sub channelFilterSet()
  m.scheduleGrid.jumpToChannel = 0
  if isValid(m.top.filter) and m.loadChannelsTask.filter <> m.top.filter
    if m.loadChannelsTask.state = "run" then m.loadChannelsTask.control = "stop"

    m.loadChannelsTask.filter = m.top.filter
    m.loadChannelsTask.control = "RUN"
  end if

end sub

'Voice Search set
sub channelsearchTermSet()
  m.scheduleGrid.jumpToChannel = 0
  'Reset filter if user says all
  if LCase(m.top.searchTerm) = LCase(tr("all")) or m.loadChannelsTask.searchTerm = LCase(tr("all"))
    m.top.searchTerm = " "
    m.loadChannelsTask.searchTerm = " "
    startLoadingSpinner()
    m.loadChannelsTask.control = "RUN"
    'filter if the searterm is not invalid
  else if isValid(m.top.searchTerm) and LCase(m.loadChannelsTask.searchTerm) <> LCase(m.top.searchTerm)
    if m.loadChannelsTask.state = "run" then m.loadChannelsTask.control = "stop"

    m.loadChannelsTask.searchTerm = m.top.searchTerm
    startLoadingSpinner()
    m.loadChannelsTask.control = "RUN"
  end if

end sub

' Initial list of channels loaded
sub onChannelsLoaded()
  gridData = createObject("roSGNode", "ContentNode")

  counter = 0
  channelIdList = ""

  'if search returns channels
  if m.loadChannelsTask.channels.count() > 0
    for each item in m.loadChannelsTask.channels
      gridData.appendChild(item)
      m.channelIndex[item.id] = counter
      counter = counter + 1
      channelIdList = channelIdList + item.id + ","
    end for
    m.scheduleGrid.content = gridData

    m.loadScheduleTask = createObject("roSGNode", "loadScheduleTask")
    m.loadScheduleTask.observeField("schedule", "onScheduleLoaded")

    m.loadScheduleTask.startTime = m.gridStartDate.ToISOString()
    m.loadScheduleTask.endTime = m.gridEndDate.ToISOString()
    m.loadScheduleTask.channelIds = channelIdList
    m.loadScheduleTask.control = "RUN"

    m.loadProgramDetailsTask = createObject("roSGNode", "loadProgramDetailsTask")
    m.loadProgramDetailsTask.observeField("programDetails", "onProgramDetailsLoaded")

    m.scheduleGrid.setFocus(true)
    if m.epgLaunchCompleteSignaled = false
      m.top.signalBeacon("EPGLaunchComplete") ' Required Roku Performance monitoring
      m.epgLaunchCompleteSignaled = true
    end if
    m.loadChannelsTask.channels = []

  end if

end sub

' When loadScheduleTask completes (initial or more data) and we have a schedule to display
sub onScheduleLoaded()

  ' make sure we actually have a schedule (i.e. filter by favorites, but no channels have been favorited)
  if m.scheduleGrid.content.GetChildCount() <= 0
    return
  end if

  for each item in m.loadScheduleTask.schedule

    channel = m.scheduleGrid.content.GetChild(m.channelIndex[item.ChannelId])

    if channel.PosterUrl <> ""
      item.channelLogoUri = channel.PosterUrl
    end if
    if channel.Title <> ""
      item.channelName = channel.Title
    end if

    channel.appendChild(item)
  end for

  m.scheduleGrid.showLoadingDataFeedback = false
  m.scheduleGrid.setFocus(true)
  m.loadScheduleTask.schedule = []
  stopLoadingSpinner()
end sub

sub onProgramFocused()
  m.top.watchChannel = invalid

  ' Make sure we have channels (i.e. filter set to favorite yet there are none)
  if m.scheduleGrid.content.getChildCount() <= 0
    channel = invalid
  else
    channel = m.scheduleGrid.content.GetChild(m.scheduleGrid.programFocusedDetails.focusChannelIndex)
  end if

  m.detailsPane.channel = channel
  m.top.focusedChannel = channel

  ' Exit if Channels not yet loaded

  if not isValid(channel) or channel.getChildCount() = 0

    m.detailsPane.programDetails = invalid
    return
  end if

  prog = channel.GetChild(m.scheduleGrid.programFocusedDetails.focusIndex)

  if isValid(prog) and prog.fullyLoaded = false
    m.loadProgramDetailsTask.programId = prog.id
    m.loadProgramDetailsTask.channelIndex = m.scheduleGrid.programFocusedDetails.focusChannelIndex
    m.loadProgramDetailsTask.programIndex = m.scheduleGrid.programFocusedDetails.focusIndex
    m.loadProgramDetailsTask.control = "RUN"
  end if

  m.detailsPane.programDetails = prog
end sub

' Update the Program Details with full information
sub onProgramDetailsLoaded()
  if not isValid(m.loadProgramDetailsTask.programDetails) then return
  channel = m.scheduleGrid.content.GetChild(m.loadProgramDetailsTask.programDetails.channelIndex)

  ' If TV Show does not have its own image, use the channel logo
  if not isValid(m.loadProgramDetailsTask.programDetails.PosterUrl) or m.loadProgramDetailsTask.programDetails.PosterUrl = ""
    m.loadProgramDetailsTask.programDetails.PosterUrl = channel.PosterUrl
  end if

  channel.ReplaceChild(m.loadProgramDetailsTask.programDetails, m.loadProgramDetailsTask.programDetails.programIndex)
  m.loadProgramDetailsTask.programDetails = invalid
  m.scheduleGrid.showLoadingDataFeedback = false
end sub


sub onProgramSelected()
  ' If there is no program data - view the channel
  if not isValid(m.detailsPane.programDetails)
    m.top.watchChannel = m.scheduleGrid.content.GetChild(m.scheduleGrid.programFocusedDetails.focusChannelIndex)
    return
  end if

  ' Move Grid Down
  focusProgramDetails(true)
end sub

' Move the TV Guide Grid down or up depending whether details are selected
sub focusProgramDetails(setFocused)

  h = m.detailsPane.height
  if h < 400 then h = 400
  h = h + 160 + 80

  if setFocused = true
    m.gridMoveAnimationPosition.keyValue = [[0, 600], [0, h]]
    m.detailsPane.setFocus(true)
    m.detailsPane.hasFocus = true
    m.top.lastFocus = m.detailsPane
  else
    m.detailsPane.hasFocus = false
    m.gridMoveAnimationPosition.keyValue = [[0, h], [0, 600]]
    m.scheduleGrid.setFocus(true)
    m.top.lastFocus = m.scheduleGrid
  end if

  m.gridMoveAnimation.control = "start"
end sub

' Handle user selecting "Watch Channel" from Program Details
sub onWatchChannelSelected()

  if m.detailsPane.watchSelectedChannel = false then return

  ' Set focus back to grid before showing channel, to ensure grid has focus when we return
  focusProgramDetails(false)

  m.top.watchChannel = m.detailsPane.channel
end sub

' As user scrolls grid, check if more data requries to be loaded
sub onGridScrolled()

  ' If we're within 12 hours of end of grid, load next 24hrs of data
  if m.scheduleGrid.leftEdgeTargetTime + (12 * 60 * 60) > m.gridEndDate.AsSeconds()

    ' Ensure the task is not already (still) running,
    if m.loadScheduleTask.state <> "run"
      m.loadScheduleTask.startTime = m.gridEndDate.ToISOString()
      m.gridEndDate.FromSeconds(m.gridEndDate.AsSeconds() + (24 * 60 * 60))
      m.loadScheduleTask.endTime = m.gridEndDate.ToISOString()
      m.loadScheduleTask.control = "RUN"
    end if
  end if
end sub

' Handle user selecting "Record Channel" from Program Details
sub onRecordChannelSelected()
  if m.detailsPane.recordSelectedChannel = false then return

  ' Set focus back to grid before showing channel, to ensure grid has focus when we return
  focusProgramDetails(false)

  m.scheduleGrid.showLoadingDataFeedback = true

  m.recordProgramTask = createObject("roSGNode", "recordProgramTask")
  m.recordProgramTask.programDetails = m.detailsPane.programDetails
  m.recordProgramTask.recordSeries = false
  m.recordProgramTask.observeField("recordOperationDone", "onRecordOperationDone")
  m.recordProgramTask.control = "RUN"
end sub

' Handle user selecting "Record Series" from Program Details
sub onRecordSeriesChannelSelected()
  if m.detailsPane.recordSeriesSelectedChannel = false then return

  ' Set focus back to grid before showing channel, to ensure grid has focus when we return
  focusProgramDetails(false)

  m.scheduleGrid.showLoadingDataFeedback = true

  m.recordProgramTask = createObject("roSGNode", "recordProgramTask")
  m.recordProgramTask.programDetails = m.detailsPane.programDetails
  m.recordProgramTask.recordSeries = true
  m.recordProgramTask.observeField("recordOperationDone", "onRecordOperationDone")
  m.recordProgramTask.control = "RUN"
end sub

sub onRecordOperationDone()
  if m.recordProgramTask.recordSeries = true and m.loadScheduleTask.state <> "run"
    m.loadScheduleTask.control = "RUN"
  else
    ' This reloads just the details for the currently selected program, so that we don't have to
    ' reload the entire grid...
    channel = m.scheduleGrid.content.GetChild(m.scheduleGrid.programFocusedDetails.focusChannelIndex)
    prog = channel.GetChild(m.scheduleGrid.programFocusedDetails.focusIndex)
    m.loadProgramDetailsTask.programId = prog.id
    m.loadProgramDetailsTask.channelIndex = m.scheduleGrid.programFocusedDetails.focusChannelIndex
    m.loadProgramDetailsTask.programIndex = m.scheduleGrid.programFocusedDetails.focusIndex
    m.loadProgramDetailsTask.control = "RUN"
  end if
end sub

function onKeyEvent(key as string, press as boolean) as boolean
  if not press then return false

  detailsGrp = m.top.findNode("detailsPane")
  gridGrp = m.top.findNode("scheduleGrid")

  if key = "back" and detailsGrp.isInFocusChain()
    focusProgramDetails(false)
    detailsGrp.setFocus(false)
    gridGrp.setFocus(true)
    return true
  else if key = "back"
    m.loadChannelsTask.control = "stop"
    m.global.sceneManager.callFunc("popScene")
    return true
  end if

  return false
end function
