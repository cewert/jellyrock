import "pkg:/source/api/baserequest.bs"
import "pkg:/source/api/Image.bs"
import "pkg:/source/api/Items.bs"
import "pkg:/source/utils/config.bs"
import "pkg:/source/utils/deviceCapabilities.bs"
import "pkg:/source/utils/misc.bs"

sub init()
  m.top.itemComponentName = "ListPoster"
  m.top.content = getData()

  ' override defaults
  m.top.rowLabelOffset = [0, 21]
  m.top.vertFocusAnimationStyle = "fixedFocus"
  m.top.rowFocusAnimationStyle = "fixedFocus"
  m.top.focusXOffset = [0]
  m.top.rowLabelOffset = [0, 21]
  m.top.translation = [491, 165]
  m.top.itemSize = [1325, 346] ' this is used for setting the row size
  m.top.itemSpacing = [0, 105]
  m.top.rowItemSize = [311, 346]
  m.top.numRows = 3

  ' TODO - Define a failed to load image background
  ' m.top.failedBitmapURI
end sub

function getData()
  if not isValid(m.top.itemData)
    data = CreateObject("roSGNode", "ContentNode")
    return data
  end if

  itemData = m.top.itemData

  ' todo - Or get the old data? I can't remember...
  data = CreateObject("roSGNode", "ContentNode")
  ' Do this to keep the ordering, AssociateArrays have no order
  type_array = ["Movie", "Series", "TvChannel", "Episode", "MusicArtist", "MusicAlbum", "Audio", "Person", "PlaylistsFolder"]
  content_types = {
    "TvChannel": { "label": "Channels", "count": 0 },
    "Movie": { "label": "Movies", "count": 0 },
    "Series": { "label": "Shows", "count": 0 },
    "Episode": { "label": "Episodes", "count": 0 },
    "MusicArtist": { "label": "Artists", "count": 0 },
    "MusicAlbum": { "label": "Albums", "count": 0 },
    "Audio": { "label": "Songs", "count": 0 },
    "Person": { "label": "People", "count": 0 },
    "PlaylistsFolder": { "label": "Playlist", "count": 0 }
  }

  for each item in itemData.Items
    if isValid(content_types[item.type])
      content_types[item.type].count += 1
    end if
  end for

  for each ctype in type_array
    content_type = content_types[ctype]
    if content_type.count > 0
      addRow(data, content_type.label, ctype)
    end if
  end for

  m.top.content = data
  return data
end function

sub addRow(data, title, type_filter)
  itemData = m.top.itemData
  row = data.CreateChild("ContentNode")
  row.title = title
  for each item in itemData.Items
    if item.type = type_filter
      row.appendChild(item)
    end if
  end for
end sub
